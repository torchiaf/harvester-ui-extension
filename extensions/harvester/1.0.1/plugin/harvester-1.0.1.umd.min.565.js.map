{"version":3,"file":"harvester-1.0.1.umd.min.565.js","mappings":"4VAiDEA,EAAAA,EAAAA,oBAYM,YAXOC,EAAAC,YAAS,kBAApBF,EAAAA,EAAAA,oBAMM,MAAAG,EAAA,CAJIF,EAAAG,QAAK,kBADbC,EAAAA,EAAAA,aAIEC,EAAA,C,MAFCC,MAAOC,EAAAC,gBACPC,MAAOF,EAAAG,c,kFAGZN,EAAAA,EAAAA,aAGEC,EAAA,C,MADCF,MAAOH,EAAAW,K,8CAxDd,GACEC,WAAY,CAAEC,WAAUA,EAAAA,GACxBC,MAAY,CACVX,MAAO,CACLY,KAASC,OACTC,QAAS,IAEXN,IAAK,CACHI,KAAUG,OACVC,UAAU,GAEZC,IAAK,CACHL,KAASG,OACTD,QAASA,QAGXhB,UAAW,CACTc,KAASM,QACTJ,SAAS,IAIbK,IAAAA,GACE,MAAO,CACLZ,aAAiB,GACjBF,gBAAiB,GAErB,EAEAe,MAAO,CACLpB,MAAO,CACLqB,OAAAA,GACE,GAAIC,KAAKxB,UAAW,CAClB,MAAMK,GAAQoB,EAAAA,EAAAA,IAAcD,KAAKtB,OAEjCsB,KAAKf,cAAeA,EAAAA,EAAAA,IAAae,KAAKtB,OACtCsB,KAAKjB,gBAAkBF,EAAMqB,QAAQ,QAAS,MAChD,CACF,EACAC,WAAW,K,WCrCjB,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O,yMCGO,MAAMC,EAAW,CACtBC,gBAAgB,EAChBC,SAAgB,CAAC,oBACjBC,OAAgB,CACd,CACE,YACA,SACA,QACA,8BAKOC,EAAU,CAAElB,QAAS,4BAErBmB,EAAa,CAAC,CACzBC,IAAM,MACNC,KAAM,SACNvB,KAAM,WAGKwB,EAAoB,CAC/BC,aAA0B,eAC1BC,yBAA0B,sBAC1BC,oBAA0B,kBAG5B,MACEC,QAAS,CACPC,qBAAAA,CAAsBC,GAEpB,MAAMC,EAAcD,EAAaE,EAAAA,GAAAA,cAAmBF,GAAcE,EAAAA,GAAAA,cAAmB,CAAC,GAChFC,EAAQF,GAAaG,UAAUD,OAAS,GAE9C,IAAIE,GAAQ,EAkBZ,OAhB6B,iBAAzBJ,GAAaK,SAA8BL,GAAaK,SAASC,SAAS,qBAC5EF,GAAQ,IAGyB,iBAA/BJ,GAAaO,eAAoCP,GAAaO,eAAeD,SAAS,qBACxFF,GAAQ,GAGVF,EAAMM,KAAKC,IACT,MAAMC,EAAMD,EAAKC,KAEU,iBAAvBA,GAAKH,eAAoCG,GAAKH,eAAeD,SAAS,qBACxEF,GAAQ,EACV,IAGKA,CACT,EAEAO,WAAAA,CAAYC,GACV,MAAMC,EAAUlC,KAAKmC,OAAOC,QAAQ,kBAAkBF,QAChDG,EAAOrC,KAAKmC,OAAOC,QAAQ,GAAIF,SAAgBI,EAAAA,GAAIC,MAAQ,GAEjE,OAAOF,EAAKG,MAAOC,GAAMA,EAAER,KAAOA,KAAKS,MAAMC,gBAAaC,CAC5D,EAEAC,SAAAA,CAAUC,GACR,OAAOA,EAAGC,UAAUC,SAASC,EAAAA,EAAgBC,GAC/C,EAEAC,WAAAA,CAAYC,GACV,MAAMC,GAAYC,EAAAA,EAAAA,IAAMhD,GACxB,IAAIiD,GAAe,EAcnB,OAZAL,EAAAA,GAAGM,SAASf,IACNA,EAAEgB,QACJF,EAAed,EAAEgB,MAAMjB,MAAMlD,GAASA,IAAS8D,IACjD,IAIAC,EAAU5C,OAAO,GAAG,GADlB8C,EACuB7C,EAAQ0C,GAER1C,EAAQ,WAG5B2C,CACT,EAEAK,gBAAAA,CAAiBN,GACf,MAAMC,GAAYC,EAAAA,EAAAA,IAAMhD,GAQxB,OALE+C,EAAU5C,OAAO,GAAG,GADP,aAAX2C,EACuB1C,EAAQ,WAERA,EAAQ,QAG5B2C,EAAU5C,OAAO,EAC1B,EAEAkD,eAAAA,CAAgBvC,EAAYgC,EAAQQ,GAClC,IAAIC,EAAa,CAAC,EAClB,MAAMR,EAAYrD,KAAKmD,YAAYC,GAEnC,IACES,EAAaC,IAAAA,KAAY1C,IAAe,CAAC,CAC3C,CAAE,MAAO2C,GAGP,OAFA,IAAIC,MAAM,mCAEHJ,CACT,CAEA,OAAOC,GAAYrD,UAAUmB,SAAS,uBAAyBkC,GAAYpD,QAAQ+B,MAAOyB,GAAMC,MAAMC,QAAQF,IAAMA,EAAEG,KAAK,OAASf,EAAU5C,OAAO,GAAG2D,KAAK,MAC/J,EAEAC,kBAAAA,CAAmB3B,GACjB,MAAM4B,EAAS5B,GAAM6B,UAAU7B,MAAM8B,QAAQC,SAASH,OAEtD,QAAIJ,MAAMC,QAAQG,MACPA,EAAO9B,MAAMC,GACbiC,IAAQjC,EAAG9B,EAAW,KAKnC,EAEAgE,YAAAA,CAAajC,GACX,QAAUA,GAAM6B,UAAU7B,MAAM8B,QAAQI,UAAUC,YAAYC,GAChE,EAEAC,YAAAA,CAAarC,GACX,QAASA,GAAM6B,UAAU7B,MAAM8B,QAAQC,SAASO,GAClD,EAEAC,YAAAA,CAAavC,GACX,QAASA,GAAM6B,UAAU7B,MAAM8B,QAAQI,UAAUC,YAAYC,KAAKI,UACpE,EAEAC,YAAAA,CAAazC,GACX,QAASA,GAAM6B,UAAU7B,MAAM8B,QAAQY,KAAKC,qBAC9C,EAEAC,mBAAAA,CAAoB5C,GAClB,MAAM6C,EAASvF,KAAKwF,UAAU9C,GAC9B,IAAI+C,EAAWF,GAAQG,aAAaC,SAChCC,EAAcL,GAAQG,aAAaG,YAEvC,MAAMC,EAAmBpD,GAAM6B,UAAU7B,MAAMqD,SAASvD,MAAOwD,GAC3C,kBAAXA,EAAEnF,QACPiF,kBAAoB,CAAC,EAazB,OAVIA,GAAkBL,WACpBA,EAAWK,EAAiBL,SAC5BzF,KAAKiG,yBAA0B,GAG7BH,GAAkBF,cACpBA,EAAcE,EAAiBF,YAC/B5F,KAAKkG,4BAA6B,GAG7B,CAAET,WAAUG,cACrB,EAEAJ,SAAAA,CAAU9C,GACR,MAAMoD,EAAmBpD,GAAM6B,UAAU7B,MAAMqD,SAASvD,MAAOwD,GAC3C,kBAAXA,EAAEnF,QACPiF,kBAAoB,CAAC,EACnB5D,EAAUlC,KAAKmC,OAAOC,QAAQ,kBAAkBF,QAChDiE,EAAUnG,KAAKmC,OAAOC,QAAQ,GAAIF,SAAgBkE,EAAAA,KAAW,GAE7DC,EAAaP,GAAkBQ,WAAWzF,MAAQiF,GAAkBS,sBAAsB1F,KAE1F0E,EAASY,EAAQ3D,MAAMgE,GAAMA,EAAEzD,SAASlC,OAASwF,IAEvD,OAAOd,CACT,EAEAkB,oBAAAA,CAAqB/D,GACnB,MAAMR,EAAUlC,KAAKmC,OAAOC,QAAQ,kBAAkBF,QAChDiE,EAAUnG,KAAKmC,OAAOC,QAAQ,GAAIF,SAAgBkE,EAAAA,KAAW,GAC7DM,EAAchE,GAAM6B,UAAU7B,MAAMiE,mBAAqB,GACzDC,EAAcC,KAAKC,MAAMpE,EAAK6B,SAASxB,UAAU6D,cAAc3D,EAAAA,EAAgB8D,wBAA0B,MAE/G,OAAOL,EAAY7E,KAAKmF,IACtB,MAAMC,EAAWD,EAAEE,aAAe,eAAiB,eAC7Cb,EAAaW,EAAEC,IAASA,QAAQ1B,QAAQc,WACxCC,EAAYH,EAAQ3D,MAAMgE,GAAMA,EAAEzD,SAASlC,OAASwF,IACpDc,EAAM,CACVF,SAAQG,SAAU,GAAIC,YAAa,GAAIC,MAAO,GAAIC,QAAS,GAAIlB,aAAYC,aAG7E,GAAKA,EAEE,GAAe,iBAAXW,EAA2B,CACpC,MAAMG,EAAW3H,OAAO+H,KAAKlB,GAAWzG,MAAM,GACxCwH,EAAcf,EAAUZ,YAAY0B,GAE1CD,EAAIC,SAAWA,EACfD,EAAIE,YAAcA,CACpB,KAAO,CACL,MAAMC,EAAQN,EAAEC,GAAQQ,kBAAkBC,eAAeJ,MACnDC,EAAUX,IAAcP,GAE9Bc,EAAIG,MAAQA,EACZH,EAAII,QAAUA,CAChB,MAbEJ,EAAIb,eAAY1D,EAelB,OAAOuE,CAAG,GAEd,EAEAQ,cAAAA,CAAe7E,GACb,MAAMiD,GAAU6B,EAAAA,EAAAA,GAA0B9E,GAE1C,OAAOiD,IAAU,IAAIhD,UAAU6D,cAAc3D,EAAAA,EAAgB4E,WAAa,EAC5E,EAEAC,oBAAAA,CAAqBpF,GACnB,MAAMqF,EAAMrF,GAAM6B,UAAUxB,UAAU6D,cAAc3D,EAAAA,EAAgB+E,YAAc,KAElF,OAAOnB,KAAKC,MAAMiB,EACpB,EAEAE,aAAAA,CAAcC,EAAS,IACrB,IAAIf,EAAM,CAAC,EAEX,IACEA,EAAMrD,IAAAA,KAAYoE,EACpB,CAAE,MAAOnE,GACP,IAAIC,MAAM,gCACZ,CAEA,OAAOmD,CACT,EAEAgB,kBAAAA,CAAmB1C,GACjB,OAAOzF,KAAKiI,cAAcxC,IAAW2C,qBAAuB,EAC9D,EAEAC,eAAAA,CAAgBC,EAAI,GAAIC,EAAI,IAC1B,MAAMC,EAAI,2BAEV,OAAOF,EAAEpI,QAAQsI,EAAG,MAAQD,EAAErI,QAAQsI,EAAG,GAC3C,EAEAC,YAAAA,CAAa/F,GACX,MAAM8E,EAAOxH,KAAK8H,qBAAqBpF,IAC/BtB,WAAYqE,GAAazF,KAAKsF,oBAAoB5C,GAE1D,IAAK8E,GAAMkB,OAAS,IAAMjD,EACxB,MAAO,GAGT,IAAI0B,EAAM,GAEV,MAAMjF,EAAUlC,KAAKmC,OAAOC,QAAQ,kBAAkBF,QAChDyG,EAAU3I,KAAKmC,OAAOC,QAAQ,GAAIF,SAAgBI,EAAAA,GAAIC,MAAQ,GAEpE4E,GAAOK,GAAQ,IAAI3F,KAAKI,IACtB,MAAM2G,EAAiBD,EAAQnG,MAAMqG,GAAQA,EAAI5G,KAAOA,IAExD,OAAI2G,EACK,CACL3G,GAAM2G,EAAe3G,GACrBpC,KAAM+I,EACNtJ,KAAMwB,EAAkBC,cAGnB,CACLkB,KACApC,KAAMoC,EACN3C,KAAMwB,EAAkBE,yBAE5B,IAGF,MAAM8H,EAAe9I,KAAKmI,mBAAmB1C,GAoB7C,OAlBAqD,EAAajH,KAAMkH,IACjB,MAAMH,EAAiBD,EAAQnG,MAAMqG,GAAQ7I,KAAKqI,gBAAgBU,EAAUF,EAAInG,MAAMC,aAElFiG,IAAmBzB,EAAI3E,MAAMC,GAAMA,EAAER,KAAO2G,EAAe3G,KAC7DkF,EAAI6B,KAAK,CACP/G,GAAM2G,EAAe3G,GACrBpC,KAAM+I,EACNtJ,KAAMwB,EAAkBC,eAEhB6H,GACVzB,EAAI6B,KAAK,CACP/G,GAAM,UACNpC,KAAMkJ,EACNzJ,KAAMwB,EAAkBG,qBAE5B,IAGKkG,CACT,G,uWCvRJ,MAAM8B,EAA0B,iCAEnBC,EAAqB,qBAErBhG,EAAK,CAAC,CACjBlE,MAAO,UACPN,MAAO,WACN,CACDM,MAAO,QACPN,MAAO,SACN,CACDM,MAAO,wBACPN,MAAO,QACN,CACDM,MAAO,SACPN,MAAO,UACN,CACDM,MAAO,SACPN,MAAO,UACN,CACDM,MAAO,SACPN,MAAO,UACN,CACDM,MAAO,SACPN,MAAO,UACN,CACDM,MAAO,UACPyE,MAAO,CAAC,SAAU,QAClB/E,MAAO,UACN,CACDM,MAAO,WACPN,MAAO,YACN,CACDM,MAAO,SACPN,MAAO,UACN,CACDM,MAAO,cACPyE,MAAO,CAAC,UACR/E,MAAO,eAGIyK,EAAS,SACTC,EAAY,OAEzB,MACEC,OAAQ,CAACC,EAAAA,IAETjK,MAAO,CACLX,MAAO,CACLY,KAAUG,OACVC,UAAU,GAGZ6J,aAAc,CACZjK,KAASC,OACTC,QAAS,KAIb,WAAMgK,GACJ,MAAMtH,EAAUlC,KAAKmC,OAAOC,QAAQ,kBAAkBF,QAChDuH,EAAO,CACXC,IAAmB1J,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMsK,EAAAA,KACxEC,KAAmB7J,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMwK,EAAAA,KACxEC,eAAmB/J,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAM0K,EAAAA,KACxE3H,KAAmBrC,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgD,EAAAA,GAAIC,MAC5E0H,SAAmBjK,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgD,EAAAA,GAAI4H,UAC5EC,OAAmBnK,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgD,EAAAA,GAAI8H,QAC5EC,SAAmBrK,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgD,EAAAA,GAAIgI,aAC5EC,UAAmBvK,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgD,EAAAA,GAAIkI,cAC5EC,kBAAmBzK,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMoL,EAAAA,KACxEC,KAAmB3K,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgD,EAAAA,GAAIsI,MAC5EC,MAAmB7K,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgD,EAAAA,GAAIwI,OAC5EC,IAAmB/K,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgD,EAAAA,GAAI0I,KAC5E7E,QAAmBnG,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAM8G,EAAAA,KACxE6E,OAAmBjL,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgD,EAAAA,GAAI4I,UAC5EC,iBAAmBnL,KAAKmC,OAAOwH,SAAS,GAAIzH,SAAiB,CAAE5C,KAAM8L,EAAAA,GAASC,SAAUpJ,GAAIgH,KAG1FjJ,KAAKmC,OAAOC,QAAQ,GAAIF,eAAsBoJ,EAAAA,MAChD7B,EAAK8B,MAAQvL,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgM,EAAAA,MAGhEtL,KAAKmC,OAAOC,QAAQ,GAAIF,eAAsBI,EAAAA,GAAIkJ,mBACpD/B,EAAKgC,gBAAkBzL,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgD,EAAAA,GAAIkJ,mBAG9ExL,KAAKmC,OAAOC,QAAQ,GAAIF,eAAsBI,EAAAA,GAAIoJ,eACpDjC,EAAKgC,gBAAkBzL,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAMgD,EAAAA,GAAIoJ,eAG9E1L,KAAKmC,OAAOC,QAAQ,GAAIF,eAAsBkJ,EAAAA,GAASO,WACzDlC,EAAKmC,gBAAkB5L,KAAKmC,OAAOwH,SAAS,GAAIzH,YAAoB,CAAE5C,KAAM8L,EAAAA,GAASO,WAGvF,MAAME,QAAYC,EAAAA,EAAAA,IAAQrC,GAEpBsC,IAAiB/L,KAAKmC,OAAOC,QAAQ,GAAIF,eAAsBI,EAAAA,GAAI0J,YACnEC,IAAsBjM,KAAKmC,OAAOC,QAAQ,GAAIF,eAAsBI,EAAAA,GAAI4J,kBAExEC,EAAgBN,EAAIZ,OAAOmB,QAAO,CAACC,EAAKC,KAAU,IAAMD,EAAK,CAACC,EAAMzL,MAAOyL,EAAM5J,MAAM6J,WAAY,CAAC,GAE1GvM,KAAKwM,WAAaT,GAAgBI,EAAcjB,EAAAA,GAAQuB,uBACxDzM,KAAK0M,gBAAkBT,GAAqBE,EAAcjB,EAAAA,GAAQuB,wBAA0BN,EAAcjB,EAAAA,GAAQyB,iCACpH,EAEA9M,IAAAA,GACE,MAAM+M,EAAU5M,KAAK6M,WAAaC,EAAAA,GAElC,MAAO,CACL5J,KACA0J,UACAlK,KAA+B,KAC/BU,OAA+B,QAC/B2J,OAA+B,GAC/BC,sBAAqB,KACrBC,oBAA+B,UAC/BC,cAAa,KACbC,YAA+B,iBAC/BC,cAA+B,EAC/BC,iBAA+B,GAC/BC,kBAA+B,EAC/BC,cAA+B,GAC/BnM,WAA+B,GAC/BoM,QAA+B,GAC/BC,SAA+B,GAC/BC,YAA+B,GAC/BC,YAA+B,GAC/BtH,WAA+B,GAC/BC,UAA+B,KAC/BsH,cAA+B,EAC/BC,aAA+B,EAC/BC,OAA+B,KAC/B1I,IAA+B,GAC/B2I,eAA+B,KAC/BpH,kBAA+B,GAC/BqH,YAA+B,EAC/BC,YAA+B,EAC/B/I,YAA+B,EAC/BgJ,mBAA+B,GAC/BjI,yBAA+B,EAC/BC,4BAA+B,EAC/BsG,YAA+B,EAC/BE,iBAA+B,EAC/ByB,cAA+BnO,KAAK6M,WAAauB,EAAAA,GAAUA,EAAAA,GAAUC,EAAAA,GACrEC,8BAA+B,GAC/BC,YAA+B,EAEnC,EAEAC,SAAU,CACRtM,OAAAA,GACE,OAAOlC,KAAKmC,OAAOC,QAAQ,kBAAkBF,OAC/C,EAEAiI,MAAAA,GACE,OAAOnK,KAAKmC,OAAOC,QAAQ,GAAIpC,KAAKkC,eAAgBI,EAAAA,GAAI8H,MAC1D,EAEAC,QAAAA,GACE,OAAOrK,KAAKmC,OAAOC,QAAQ,GAAIpC,KAAKkC,eAAgBI,EAAAA,GAAIgI,WAC1D,EAEAC,SAAAA,GACE,OAAOvK,KAAKmC,OAAOC,QAAQ,GAAIpC,KAAKkC,eAAgBI,EAAAA,GAAIkI,YAC1D,EAEAX,IAAAA,GACE,OAAO7J,KAAKmC,OAAOC,QAAQ,GAAIpC,KAAKkC,eAAgB4H,EAAAA,GACtD,EAEA3D,OAAAA,GACE,OAAOnG,KAAKmC,OAAOC,QAAQ,GAAIpC,KAAKkC,eAAgBkE,EAAAA,GACtD,EAEAqI,kBAAAA,GACE,OAAOzO,KAAKmC,OAAOC,QAAQ,iBAAiBsM,EAAAA,IAAWC,QAAQC,IAAeA,EAAUC,UAC1F,EAEAtD,KAAAA,GACE,OAAOvL,KAAKmC,OAAOC,QAAQ,iBAAiBkJ,EAAAA,GAC9C,EAEAwD,cAAAA,GACE,MAAMvD,EAAQvL,KAAKmC,OAAOC,QAAQ,GAAIpC,KAAKkC,eAAgBoJ,EAAAA,IAErDyD,EAAe/O,KAAK0N,YAAY7L,KAAKmN,GAAMA,EAAEC,cAC7CC,EAAalP,KAAKmC,OAAOC,QAAQ,GAAIpC,KAAKkC,eAAgBwI,EAAAA,IAC1DyE,EAAqBJ,EAAalN,KAAKhB,GAASqO,EAAW1M,MAAMwM,GAAMA,EAAE/M,KAAOpB,MAAO8N,QAAQK,GAAMA,GAAG/M,KACxGwJ,GAAkB2D,EAAAA,EAAAA,IAAKD,EAAmBtN,KAAKmN,GAAMA,EAAEK,wBAAwBpN,MAErF,OAAOsJ,EAAMoD,QAAQW,IAAOA,EAAEC,kBAAiB1N,KAAK2N,IAClD,MAAMC,EAAmB,GACzB,IAAIC,GAAoB,EAcxB,OAZIjE,EAAgB/C,OAAS,GAC3B+C,EAAgB5J,KAAK8N,IACnBF,EAAiBzG,KAAK,2BAA4B2G,IAAkB,IAIxEF,EAAiB5N,KAAK+N,IAC6B,SAA7CJ,EAAKzM,UAAUC,SAAS4M,KAC1BF,GAAoB,EACtB,IAGK,CACL1Q,MAAU0Q,EAAoBF,EAAKK,YAAc,GAAIL,EAAKK,gBAAkB7P,KAAK8P,EAAE,4DACnFpR,MAAU8Q,EAAKvN,GACf8N,UAAWL,EACZ,GAEL,EAEAM,mBAAAA,GACE,MAAMC,EAAiBjQ,KAAKmC,OAAOC,QAAQ,GAAIpC,KAAKkC,eAAgB8H,EAAAA,IAAexH,MAAOC,GAAMA,EAAEyN,YAElG,OAAOD,CACT,EAEAE,mBAAAA,GACE,IACE,MAAMC,EAAoBpQ,KAAKmC,OAAOC,QAAQ,GAAIpC,KAAKkC,eAAgBI,EAAAA,GAAI4H,SAAS1H,MAAOC,GAAMA,EAAER,KAAOoO,EAAAA,GAAYC,yBAAwB5R,MAE9I,OAAOmI,KAAKC,MAAMsJ,EACpB,CAAE,MAAOrM,GACP,MAAO,CAAC,CACV,CACF,EAEAwM,gBAAAA,GACE,OAAOvQ,KAAKmQ,oBAAoBK,YAAc,OAChD,EAEAC,gBAAAA,GACE,OAAOzQ,KAAKmQ,oBAAoBO,aAAe,eACjD,EAEAC,SAAAA,GACE,MAAuB,YAAhB3Q,KAAKoD,MACd,EAEAwN,aAAAA,GAEE,OAAO5Q,KAAKuJ,eAAiBjH,EAAAA,GAAIgI,YAActK,KAAK6Q,QACtD,EAEAC,yBAAAA,GACE,MAAMC,EAAU/Q,KAAKmC,OAAOC,QAAQ,GAAIpC,KAAKkC,eAAgBI,EAAAA,GAAI4H,SAAS1H,MAAOC,GAAMA,EAAER,KAAOoO,EAAAA,GAAYW,yBAA0B,CAAC,EAEvI,OAAOC,OAAOF,GAASrS,OAASqS,GAASvR,QAC3C,EAEA0R,cAAAA,GACE,MAAO,CACLC,oBAA0BnR,KAAK8P,EAAE,8CACjCsB,yBAA0B,CACxBpR,KAAK8P,EAAE,8CACP9P,KAAK8P,EAAE,8CACP9P,KAAK8P,EAAE,4DAETuB,SAAwBrR,KAAK8P,EAAE,sCAC/BwB,uBAAwBtR,KAAK8P,EAAE,qDAEnC,GAGF,aAAMyB,SACEvR,KAAKmC,OAAOwH,SAAS,GAAI3J,KAAKkC,kBAAoB,CAAE5C,KAAM8G,EAAAA,KAChEpG,KAAKwR,cAAc,CAAE9S,MAAOsB,KAAKtB,MAAO+S,KAAMzR,KAAK6Q,UACrD,EAEA3P,QAAS,CACPsQ,aAAAA,CAAcE,GACZ,MAAM,MACJhT,EAAK,cAAEiT,EAAa,aAAEC,GAAe,EAAK,KAAEH,GAAO,GACjDC,EAEE5O,EAAK9C,KAAKuJ,eAAiBjH,EAAAA,GAAI0I,GAAKtM,EAAQsB,KAAKuJ,eAAiBjH,EAAAA,GAAIuP,OAAS7R,KAAKtB,MAAMoT,QAAQ7K,OAASvI,EAAMgE,KAAKI,GACtHiP,EAAgB/R,KAAKuJ,eAAiBjH,EAAAA,GAAIuP,OAAS7R,KAAKtB,MAAMoT,QAAQC,cAAgB,KAEtFrP,EAAOI,GAAIJ,KAEjB,IAAKA,EACH,OAEF,MAAMsP,EAAYtP,EAAK6B,SAAS7B,KAAK8B,OAAOwN,YAGvCA,GAAWC,QAAWD,GAAWC,SAAWD,GAAWC,QAAQnE,QAAwC,OAA9BkE,GAAWC,QAAQnE,UAC/FpL,EAAK6B,SAAS7B,KAAK8B,OAAOwN,UAAY,IACjCtP,EAAK6B,SAAS7B,KAAK8B,OAAOwN,UAC7BC,OAAQ,IACHvP,EAAK6B,SAAS7B,KAAK8B,OAAOwN,UAAUC,OACvCnE,OAAQpL,EAAK6B,SAAS7B,KAAK8B,OAAOwN,UAAUE,SAASpE,UAKtDhL,EAAGC,SAASC,SACfF,EAAGC,SAASC,OAAS,CAAC,GAExB,MAAMiK,EAAsBnK,EAAGC,SAASC,SAASC,EAAAA,EAAgBkP,+BAAiC,UAE5FhF,EAAczK,EAAKyK,aAAe,iBAClCQ,EAAcjP,EAAMiP,YACpBvI,EAAM1C,EAAK6B,SAAS7B,KAAK8B,QAAQY,KAAKgN,MACtCtE,EAASpL,EAAK6B,SAAS7B,KAAK8B,OAAOwN,UAAUC,OAAOnE,OACpDC,EAAiBjL,EAAGC,UAAU6D,cAAc3D,EAAAA,EAAgBoP,oBAC5D/D,EAAgC5L,EAAK6B,SAAS7B,MAAM4L,+BAAiCtO,KAAK8Q,0BAE1F/D,EAAS/M,KAAK8H,qBAAqBpF,IAAS,GAE5C8K,EAAUxN,KAAK2H,eAAe7E,IAAO,GACrC2K,EAAWzN,KAAKsS,YAAYxP,EAAIiP,GAEhCrE,EAAc1N,KAAKuS,eAAezP,EAAI,CAAE8O,eAAcH,SACtDpE,EAAmBrN,KAAKwS,qBAAqB9P,IAAS,GAE5D,IAAI,SAAE+C,EAAoB,YAAEG,GAA4B5F,KAAKsF,oBAAoB5C,GAEjF,GAAI1C,KAAKuJ,eAAiBjH,EAAAA,GAAIuP,OAAQ,CACpC,MAAMY,EAAgBzS,KAAKtB,MAAMoT,QAAQW,cAEzC,GAAIA,EAAe,CACjB,MAAMC,EAAoBD,EAAc,IAAI5S,MAAMgG,aAAe,GAC3D8M,EAAiBF,EAAc,IAAI5S,MAAM8F,UAAY,GAE3DF,GAAWmN,EAAAA,EAAAA,GAAaD,GACxB/M,GAAcgN,EAAAA,EAAAA,GAAaF,EAC7B,CACF,CACA,MAAMtP,EAASpD,KAAK6C,UAAUC,IAAO,QAErC2C,GAAWzF,KAAK6Q,UAAac,GAAkB3R,KAAK4M,QAA6CnH,EAAnCzF,KAAK6S,gBAAgB,CAAEzP,WAErF,MAAMkK,EAAmBtN,KAAKqE,mBAAmB3B,GAC3C0K,EAAepN,KAAK2D,gBAAgB8B,EAAUrC,GAAQ,GACtD4K,EAAahO,KAAK2E,aAAajC,GAC/BuL,EAAajO,KAAK+E,aAAarC,GAC/BwC,EAAalF,KAAKiF,aAAavC,GAC/B6L,EAAavO,KAAKmF,aAAazC,GAE/B4D,EAAYtG,KAAKwF,UAAU9C,GAC3BiE,EAAoB3G,KAAKyG,qBAAqB/D,GAEhDjD,OAAOqT,UAAUC,eAAeC,KAAKtQ,EAAM,oBACtCA,EAAKuQ,QACZvQ,EAAKyK,YAAc,kBAGrBnN,KAAK,QAAU0C,EACf1C,KAAK,uBAAyBiN,EAC9BjN,KAAK,eAAiBmN,EACtBnN,KAAK,aAAesG,EACpBtG,KAAK,qBAAuB2G,EAC5B3G,KAAK,cAAgByF,EACrBzF,KAAK,iBAAmB4F,EAExB5F,KAAK,UAAY+M,EACjB/M,KAAK,UAAYoD,EACjBpD,KAAK,gBAAkBoN,EAEvBpN,KAAK,OAASoF,EACdpF,KAAK,UAAY8N,EACjB9N,KAAK,kBAAoB+N,EACzB/N,KAAK,eAAiB2N,EACtB3N,KAAK,iCAAmCsO,EAExCtO,KAAK,oBAAsBsN,EAC3BtN,KAAK,cAAgBgO,EACrBhO,KAAK,cAAgBiO,EACrBjO,KAAK,cAAgBkF,EACrBlF,KAAK,cAAgBuO,EAErBvO,KAAK,oBAAsBqN,EAC3BrN,KAAK,eAAiB0N,EACtB1N,KAAK,WAAawN,EAElBxN,KAAK,YAAcyN,EAEnBzN,KAAKkT,mBACP,EAEAZ,WAAAA,CAAYxP,EAAIqQ,GACd,MAAMvE,EAAY9L,EAAGC,SAAS6L,UACxBwE,EAAWtQ,EAAGJ,KAAK6B,SAAS7B,KAAKqD,SAAW,GAC5CsN,EAASvQ,EAAGJ,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAQ6O,OAAS,GACvDC,GAAwB3L,EAAAA,EAAAA,GAA0B9E,GAExD,IAAIqE,EAAM,GAEV,GAAsB,IAAlBkM,EAAO3K,OAAc,CACvB,IAAI9H,EAAM,SACNtB,EAAO8J,EACPoK,EAAO,OAEX,MAAMC,EAAgBzT,KAAKmK,OAAO3H,MAAOkR,GAAM1T,KAAKwN,UAAYkG,EAAEzR,KAE5D0R,EAAa,QAAQC,KAAKH,GAAeI,aACzCC,EAAYC,KAAKC,IAAIP,GAAe3B,QAAQ0B,KAAMC,GAAe3B,QAAQmC,aACzEC,EAAcT,GAAeS,cAAe,EAC5CnC,EAAgBoB,GAAY3Q,MAAM2R,GAAmC,WAAvBA,EAAQC,cAA4B,KAOxF,GALIT,IACF/S,EAAM,OACNtB,EAAO6J,GAGL2K,EAAW,CACb,IAAIO,EAAeN,KAAKO,KAAKR,EAAY,KAAO,KAAO,MAElDH,IACHU,EAAeN,KAAKC,IAAIK,EAAc,KAExCb,EAAO,GAAIa,KACb,CAEAlN,EAAI6B,KAAK,CACP/G,IAAkBsS,EAAAA,EAAAA,IAAU,GAC5BtN,OAAkBuN,EAAAA,GAAYpK,MAC9BvJ,KAAkB,SAClB4T,WAAkB,gBAClB7T,MACAwT,WAAkB,GAClBZ,OACAlU,OACAoV,iBAAkB,GAClBC,MAAkB3U,KAAKwN,QACvBgD,WAAkB,QAClB0D,cACAnC,iBAEJ,MACE5K,EAAMkM,EAAOxR,KAAK,CAAC+S,EAAMC,KACvB,MAAMC,EAAS1B,EAAS5Q,MAAOwD,GAAMA,EAAEnF,OAAS+T,EAAK/T,OAErD,IAAI2S,EAAO,GACPmB,EAAQ,GACR1N,EAAS,GACT8N,EAAW,GACXC,EAAY,GACZZ,EAAa,GACbK,EAAa,GACbjE,EAAa,GACbkE,EAAmB,GACnBO,GAAe,EACfC,EAAa,KAEjB,MAAM5V,EAAOsV,GAAMO,MAAQhM,EAASyL,GAAMQ,KAAOhM,EAAY,GAO7D,GALI0L,GAAQO,gBACVpO,EAASuN,EAAAA,GAAYc,UACrBN,EAAYF,EAAOO,cAAcV,OAG/BG,EAAOS,uBAAyBT,EAAOS,uBAAuBC,UAAW,CAC3EpB,EAAaU,EAAOS,sBAAsBC,UAC1C,MAAMC,EAAMlC,EAAsB/Q,MAAOkT,GAAMA,EAAE3S,SAASlC,OAASuT,IAInE,GAFAW,EAAWX,EAEPqB,EAAK,MAEuD7S,IAA1D6S,EAAI1S,UAAU6D,cAAc3D,EAAAA,EAAgB4E,WAC9C8M,EAAQc,EAAI1S,UAAU6D,cAAc3D,EAAAA,EAAgB4E,UACpDZ,EAASuN,EAAAA,GAAYpK,OAErBnD,EAASuN,EAAAA,GAAYmB,IAGvB,MAAMC,EAAoBH,GAAK/S,MAAQ,CAAC,EAExC8N,EAAaoF,GAAmBpF,WAChCiE,EAAamB,GAAmBlF,cAAc,GAC9C8C,EAAOoC,GAAmB5D,WAAWE,UAAU2D,SAAW,OAC1DnB,EAAmBkB,GAAmBlB,iBACtCQ,EAAaU,GAAmBV,UAClC,KAAO,CAGL,MAAMY,EAAU9V,KAAKmC,OAAOC,QAAQ,iBAAiB0H,EAAAA,IAC/CiM,EAAcD,EAAQtT,MAAOC,GAAMA,EAAER,KAAO,GAAI2M,KAAekG,GAAQS,uBAAuBC,cAEpGvO,EAASuN,EAAAA,GAAYwB,cACrBvB,EAAasB,GAAarT,MAAMgO,cAAc,IAAM,gBACpD8C,EAAOuC,GAAarT,MAAMsP,WAAWE,UAAU2D,SAAW,OAC1DnB,EAAmBqB,GAAarT,MAAMgS,iBACtClE,EAAauF,GAAarT,MAAM8N,YAAc,QAC9C4D,EAAa2B,GAAahT,UAAUlC,MAAQ,EAC9C,CAEAoU,EAAeH,EAAOS,sBAAsBN,eAAgB,CAC9D,CAEA,MAAMrU,EAAMgU,GAAMQ,MAAMxU,KAAOgU,GAAMO,OAAOvU,IAEtCqV,EAAYrB,GAAMqB,UAAYrB,GAAMqB,UAAYpB,EAEhDqB,GAAaC,EAAAA,EAAAA,IAAQ3C,GAErB4C,GAAaC,EAAAA,EAAAA,IAASH,EAAY,CACtCI,UAAa,KACbC,WAAa,EACbC,YAAa,EACbC,YAAa,IAGTC,EAAM1W,KAAK6J,KAAKrH,MAAMmU,GAAMA,EAAE1U,KAAO,GAAIjC,KAAKtB,MAAMqE,SAAS6L,aAAewF,MAE5EwC,EAAeF,GAAKG,WAAW9T,UAAU6D,cAAc3D,EAAAA,EAAgB6T,cAEvE5C,EAAcwC,GAAKxC,cAAe,EAClCnC,EAAgBoB,GAAY3Q,MAAM2R,GAAYA,EAAQC,aAAeQ,EAAK/T,QAAS,KAEzF,MAAO,CACLoB,IAAYsS,EAAAA,EAAAA,IAAU,GACtB0B,YACAhP,SACApG,KAAY+T,EAAK/T,KACjBkU,WACAnU,MACAwT,aACAY,YACAP,aACAjB,KAAY,GAAI4C,MAChB5F,WAAYA,GAAcxQ,KAAKuQ,iBAC/BoE,QACArV,OACAoV,mBACAO,eACA2B,eACA1B,aACAtG,YACAsF,cACAnC,gBACD,IAML,OAFA5K,GAAM4P,EAAAA,EAAAA,IAAO5P,EAAK,aAEXA,EAAIwH,QAASlM,GAAiB,kBAAXA,EAAE5B,MAC9B,EAEA0R,cAAAA,CAAezP,EAAI4O,GACjB,MAAM,aAAEE,GAAe,EAAK,KAAEH,GAAO,GAAUC,EAEzCsF,EAAWlU,EAAGJ,KAAK6B,SAAS7B,KAAKsU,UAAY,GAC7CC,EAAanU,EAAGJ,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAQwS,YAAc,GAEhE9P,EAAM8P,EAAWpV,KAAK,CAAC6R,EAAGmB,KAC9B,MAAMqC,EAAUF,EAASxU,MAAO8M,GAAMoE,EAAE7S,OAASyO,EAAEzO,OAE7CvB,EAAOoU,EAAEyD,MAAQ,QAAUzD,EAAE0D,OAAS,SAAW,aAEjDC,IAAUH,EAAQI,IAExB,MAAO,IACF5D,EACHmB,QACAvV,OACA+X,QACAE,eAAc3F,IAAgBH,KAAQ8C,EAAAA,EAAAA,IAAU,IAChDiD,MAAa9D,EAAE8D,MACfvI,YAAaoI,EAAQnO,EAAqBgO,GAASO,QAAQxI,YAC5D,IAGH,OAAO9H,CACT,EAEAuQ,OAAAA,GACE1X,KAAKyF,SAAWzF,KAAK2X,YAAY,CAAEvU,OAAQpD,KAAKoD,OAAQgK,aAAcpN,KAAKoN,eAC3EpN,KAAK4X,aACL5X,KAAK6X,yBACL7X,KAAK8X,iBAAiB9X,KAAK0N,aAC3B1N,KAAK+X,cAAc/X,KAAKyN,SAC1B,EAEAmK,UAAAA,GACO5X,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOwT,QAGlChY,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOwT,QAAQ,QAAUhY,KAAK2N,YAFtD3N,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAO,WAAa,CAAElF,KAAMU,KAAK2N,aAK3D3N,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOY,IAAIgN,MAAQpS,KAAKoF,IAChDpF,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOwN,UAAUC,OAAO7M,IAAMpF,KAAKoF,IAAMpF,KAAKoF,IAAI6S,WAAajY,KAAKoF,IAC5FpF,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOwN,UAAUC,OAAOnE,OAAS9N,KAAK8N,OAC9D9N,KAAK0C,KAAK6B,SAAS7B,KAAK4L,8BAAgCtO,KAAKsO,8BAG7D,MAAMxL,EAAK9C,KAAKuJ,eAAiBjH,EAAAA,GAAI0I,GAAKhL,KAAKtB,MAAQsB,KAAKtB,MAAMgE,KAAKI,GAElE9C,KAAK+N,eAGRjL,EAAGC,SAAS6D,YAAY3D,EAAAA,EAAgBoP,oBAAsBrS,KAAK+N,sBAF5DjL,EAAGC,SAAS6D,YAAY3D,EAAAA,EAAgBoP,oBAKhB,YAA7BrS,KAAKiN,2BACAnK,EAAGC,SAASC,OAAOC,EAAAA,EAAgBkP,8BAE1CrP,EAAGC,SAASC,OAAOC,EAAAA,EAAgBkP,8BAAgCnS,KAAKiN,mBAE5E,EAEA8K,aAAAA,CAAc3C,GACZ,MAAM9B,EAAQ,GACRvN,EAAU,GACVmS,EAAiB,GACjBC,EAAuB,GAgC7B,GA9BA/C,EAAK5R,SAAS,CAAC4U,EAAGvD,KAChB,MAAMwD,EAAarY,KAAKtB,MAAMqE,UAAUlC,MAAQ,GAEhD,IAAIyX,EAAiB,GAGnBA,EADEF,EAAEnR,SAAWuN,EAAAA,GAAYwB,cACVoC,EAAEhE,WACVpU,KAAK4M,UAAY5M,KAAKqN,iBAAiB1L,SAASyW,EAAErD,UAC1C,GAAIsD,KAAgBD,EAAEvX,SAAU0T,EAAAA,EAAAA,IAAU,GAAGgE,gBAE7CH,EAAErD,SAGrB,MAAMyD,EAAQxY,KAAKyY,UAAUL,EAAGvD,GAC1B6D,EAAU1Y,KAAK2Y,YAAYP,EAAGE,GAC9BM,EAAsB5Y,KAAK6Y,yBAAyBT,EAAGE,GAE7DhF,EAAMtK,KAAKwP,GACXzS,EAAQiD,KAAK0P,GACbR,EAAelP,KAAKsP,GAEhBF,EAAEnR,SAAWuN,EAAAA,GAAYc,WAC3B6C,EAAqBnP,KAAK4P,EAC5B,IAGG5Y,KAAKqG,aAAcrG,KAAK4Q,gBAC3B5Q,KAAKqG,WAAarG,KAAK8Y,mBAAmB9Y,KAAK+Y,oBAG5CzF,EAAM9Q,MAAOwW,GAAiB,kBAAXA,EAAEnY,SAA8Bb,KAAKyF,UAAYzF,KAAK4F,eACvE5F,KAAK2Q,UAAW,CACnB2C,EAAMtK,KAAK,CACTnI,KAAM,gBACNuU,KAAM,CAAExU,IAAK,YAGf,MAAM6E,EAAWzF,KAAK2X,YAAY,CAAEvU,OAAQpD,KAAKoD,OAAQgK,aAAcpN,KAAKoN,eAEtE6L,EAAgB,CACpBpY,KAAkB,gBAClBiF,iBAAkB,CAAC,GAGjB9F,KAAKiG,wBACPgT,EAAcnT,iBAAiBL,SAAWA,EAE1CwT,EAAcnT,iBAAiBQ,UAAY,CAAEzF,KAAMb,KAAKqG,YAGtDrG,KAAKkG,2BACP+S,EAAcnT,iBAAiBF,YAAc5F,KAAKuN,cAElD0L,EAAcnT,iBAAiBS,qBAAuB,CAAE1F,KAAMb,KAAKqG,YAGrEN,EAAQiD,KAAKiQ,EACf,CAGF,IAAIvW,EAAO,IACN1C,KAAK0C,KACRyK,YAAanN,KAAKmN,YAClB5I,SAAa,IACRvE,KAAK0C,KAAK6B,SACbxB,SAAU,IACL/C,KAAK0C,MAAM6B,UAAUxB,SACxB6D,YAAa,IACR5G,KAAK0C,MAAM6B,UAAUxB,UAAU6D,YAClC,CAAC3D,EAAAA,EAAgB+E,WAAYnB,KAAKqS,UAAUlZ,KAAK+M,SAEnD/J,OAAQ,IACHhD,KAAK0C,MAAM6B,UAAUxB,UAAUC,OAClC,CAACC,EAAAA,EAAgBkW,SAAUnZ,KAAKtB,OAAOqE,UAAUlC,OAGrD6B,KAAM,IACD1C,KAAK0C,KAAK6B,UAAU7B,KACvB8B,OAAQ,IACHxE,KAAK0C,KAAK6B,UAAU7B,MAAM8B,OAC7BC,QAAS,IACJzE,KAAK0C,KAAK6B,UAAU7B,MAAM8B,QAAQC,QACrC6O,UAGJvN,aAKiB,IAAnBA,EAAQ2C,eACHhG,EAAK6B,SAAS7B,KAAKqD,QAGxB/F,KAAKuJ,eAAiBjH,EAAAA,GAAI0I,IACvBhL,KAAKoZ,WACR1W,EAAO1C,KAAKqZ,iBAAiB3W,IAG/B1C,KAAKtB,MAAMqE,SAAS,eAAiB,IAChC/C,KAAKtB,MAAMqE,SAAS6D,YACvB,CAAC3D,EAAAA,EAAgBqW,uBAAwBzS,KAAKqS,UAAUf,GACxD,CAAClV,EAAAA,EAAgBsW,aAAwB1S,KAAKqS,UAAUlZ,KAAKtB,MAAM8a,aAGrExZ,KAAKtB,MAAMqE,SAAS,UAAY,IAC3B/C,KAAKtB,MAAMqE,SAASC,OACvB,CAACC,EAAAA,EAAgBwW,SAAU,YAC3B,CAACxW,EAAAA,EAAgBC,IAAUlD,KAAKoD,QAGlCpD,KAAKtB,MAAM,QAAUgE,EACrB1C,KAAK,QAAU0C,GACN1C,KAAKuJ,eAAiBjH,EAAAA,GAAIgI,aACnCtK,KAAKtB,MAAMgE,KAAKI,GAAG,QAAUJ,EAC7B1C,KAAKtB,MAAMgE,KAAKI,GAAGC,SAAS,eAAiB,IACxC/C,KAAKtB,MAAMgE,KAAKI,GAAGC,SAAS6D,YAC/B,CAAC3D,EAAAA,EAAgBqW,uBAAwBzS,KAAKqS,UAAUf,IAE1DnY,KAAKtB,MAAMgE,KAAKI,GAAGC,SAAS,UAAY,IACnC/C,KAAKtB,MAAMgE,KAAKI,GAAGC,SAASC,OAC/B,CAACC,EAAAA,EAAgBC,IAAKlD,KAAKoD,QAE7BpD,KAAK,QAAU0C,EAEnB,EAEAgX,oBAAAA,CAAqBC,GACnB,MAAOA,EAAIC,SAAS,KAClBD,EAAMA,EAAIE,MAAM,GAAI,GAGtB,OAAOF,CACT,EAEAN,gBAAAA,CAAiB3W,GACf,MAAMoX,EAAa9Z,KAAK0Z,qBAAqB1Z,KAAK8Z,YAElDpX,EAAK6B,SAASxB,SAASC,OAAOC,EAAAA,EAAgB8W,gBAAkBD,EAEhE,MAAME,EAAO,CACXC,OAAiB,EACjBC,gBAAiB,CACfC,YAAeC,EAAAA,GACfC,cAAe,CAAEC,YAAa,CAAE,CAACrX,EAAAA,EAAgB8W,gBAAiBD,MAItE,MAAO,IACFpX,EACH6B,SAAU,IACL7B,EAAK6B,SACR7B,KAAM,IACDA,EAAK6B,SAAS7B,KACjB6X,SAAU,IACL7X,EAAK6B,SAAS7B,KAAK6X,SACtBC,gBAAiB,IACZ9X,EAAK6B,SAAS7B,MAAM6X,UAAUC,gBACjCC,gDAAiD,IAC3C/X,EAAK6B,SAAS7B,MAAM6X,UAAUC,iBAAiBC,iDAAmD,GACtGT,OAOd,EAEAlC,gBAAAA,CAAiB4C,GACf,MAAM1D,EAAW,GACXC,EAAa,GAEnByD,EAAWlX,SAAU4U,IACnB,MAAMuC,EAAW3a,KAAK4a,aAAaxC,GAC7ByC,EAAa7a,KAAK8a,eAAe1C,GAEvCpB,EAAShO,KAAK2R,GACd1D,EAAWjO,KAAK6R,EAAW,IAG7B,MAAMnY,EAAO,IACR1C,KAAK0C,KAAK6B,SAAS7B,KACtB8B,OAAQ,IACHxE,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAC3BC,QAAS,IACJzE,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAClCwS,eAGJD,YAGFhX,KAAK0C,KAAK6B,SAAS,QAAU7B,CAC/B,EAEAmV,sBAAAA,GACE,MAAM1Q,EAAM,GACNP,EAAc,CAAC,EACfU,EAAQT,KAAKC,MAAM9G,KAAK0C,MAAM6B,UAAUxB,UAAU6D,cAAc3D,EAAAA,EAAgB8X,wBAA0B,MAEhH,IAAK,MAAM7b,KAAOc,KAAK2G,kBACjB3G,KAAK4Q,gBACP1R,EAAImH,WAAarG,KAAK8Y,mBAAmB9Y,KAAK+Y,mBAG5C7Z,EAAI+H,SAAW+T,EAAAA,GAAmBC,YACpC3T,EAAM0B,KAAK9J,EAAIkI,UACfD,EAAI6B,KAAK,CACP9B,aAAc,CACZD,OAAmB,CAAE1B,OAAQ,CAAEc,WAAYnH,EAAImH,aAC/CoB,kBAAmB,CAAEC,eAAgB,CAAE,OAKzCxI,EAAI+H,SAAW+T,EAAAA,GAAmBE,aACpC5T,EAAM0B,QAAQ9J,EAAIoI,OAClBV,EAAY1H,EAAImH,YAAcnH,EAAIqI,QAClCJ,EAAI6B,KAAK,CACPmS,aAAc,CACZlU,OAAmB,CAAE1B,OAAQ,CAAEc,WAAYnH,EAAImH,aAC/CoB,kBAAmB,CAAEC,eAAgB,CAAEJ,MAAOpI,EAAIoI,YAMvC,IAAfH,EAAIuB,QAAkB1I,KAAK0C,KAAK6B,SAAS7B,KAAKiE,yBACzC3G,KAAK0C,KAAK6B,SAAS7B,KAAKiE,kBAE/B3G,KAAK0C,KAAK6B,SAAS7B,KAAKiE,kBAAoBQ,EAGzB,IAAjBG,EAAMoB,SACR1I,KAAK0C,KAAK6B,SAASxB,SAAS6D,YAAY3D,EAAAA,EAAgB8X,uBAAyBlU,KAAKqS,UAAUhV,MAAMkX,KAAK,IAAIC,IAAI/T,KACnHtH,KAAK0C,KAAK6B,SAASxB,SAAS6D,YAAY3D,EAAAA,EAAgB8D,uBAAyBF,KAAKqS,UAAUtS,GAEpG,EAEA0U,iCAAAA,CAAkCC,GAChC,OAAOvb,KAAK8P,EAAE,wDAAyDyL,EAAIvc,OAASuc,IACtF,EAEA1I,eAAAA,CAAgBnB,GACd,MAAMrO,EAAYrD,KAAKmD,YAAYuO,EAAOtO,QAEpC+D,EAAMrD,IAAAA,KAAYT,GAExB,MAAO,kBAAmB8D,GAC5B,EAOAwQ,WAAAA,CAAYjG,GACV,IAEE,IAAIrQ,EAAcrB,KAAKoB,WAAaE,EAAAA,GAAAA,cAAmBtB,KAAKoB,YAAcE,EAAAA,GAAAA,cAAmB,CAAC,GAE9F,MAAMka,EAAuBxb,KAAKyb,uBAAuBzb,KAAKoB,YAE1Doa,EAAqB9S,OAAS,EAChCrH,EAAYqa,MAAM,CAAC,uBAAwBF,GAClCla,EAAAA,GAAAA,aAAkBD,EAAYsa,MAAM,yBAC7Cta,EAAYua,SAAS,CAAC,wBAGxBva,EAAcqQ,EAAOtE,aAAepN,KAAK6b,SAAS,CAAExa,iBAAgBqQ,IAAY1R,KAAK8b,UAAU,CAAEza,iBAAgBqQ,IACjH,MAAMqK,EAAe1a,EAAY4W,WAEjC,GAAqB,SAAjB8D,EAEF,OAGF,OAAOA,CACT,CAAE,MAAOhY,GAGP,OAFAiY,EAAQC,MAAM,uCAAwClY,GAE/C/D,KAAKoB,UACd,CACF,EAEA8a,YAAAA,CAAaC,GACXnc,KAAK,UAAYmc,CACnB,EAEAC,eAAAA,CAAgBhX,EAAK0I,GACnB9N,KAAK,OAASoF,EACdpF,KAAK,UAAY8N,CACnB,EAEA2K,SAAAA,CAAUL,EAAGvD,GACX,MAAM1N,EAAM,CAAEtG,KAAMuX,EAAEvX,MAUtB,OARIuX,EAAE9Y,OAAS8J,EACbjC,EAAIiO,KAAO,CAAExU,IAAKwX,EAAExX,KACXwX,EAAE9Y,OAAS6J,IACpBhC,EAAIgO,MAAQ,CAAEvU,IAAKwX,EAAExX,MAGvBuG,EAAI8O,UAAYpB,EAAQ,EAEjB1N,CACT,EAEAwR,WAAAA,CAAYP,EAAGE,GACb,MAAMnR,EAAM,CAAEtG,KAAMuX,EAAEvX,MAWtB,OATIuX,EAAEnR,SAAWuN,EAAAA,GAAYc,UAC3BnO,EAAIkO,cAAgB,CAAEV,MAAOyD,EAAEpD,WACtBoD,EAAEnR,SAAWuN,EAAAA,GAAYpK,OAASgO,EAAEnR,SAAWuN,EAAAA,GAAYmB,KAAOyC,EAAEnR,SAAWuN,EAAAA,GAAYwB,gBACpG7O,EAAIoO,sBAAwB,CAAEC,UAAW8C,GACrCF,EAAEnD,eACJ9N,EAAIoO,sBAAsBN,cAAe,IAItC9N,CACT,EAEA0R,wBAAAA,CAAyBT,EAAGE,IACrB/Y,OAAO6Y,EAAE5E,MAAM7R,SAAS,OAASyW,EAAE5E,OACtC4E,EAAE5E,KAAO,GAAI4E,EAAE5E,UAGjB,MAAMrM,EAAM,CACVpE,SAAU,CAAElC,KAAMyX,GAClB5V,KAAU,CACRgO,YAAa,CAAC0H,EAAE3D,YAChBzC,UAAa,CAAEE,SAAU,CAAE2D,QAASuC,EAAE5E,OACtChD,WAAa4H,EAAE5H,aAQnB,OAJI4H,EAAElD,aACJ/N,EAAIzE,KAAKwS,WAAakD,EAAElD,YAGlBkD,EAAEnR,QACV,KAAKuN,EAAAA,GAAYwB,cACf7O,EAAIzE,KAAKgS,iBAAmB0D,EAAE1D,iBAC9B,MACF,KAAKF,EAAAA,GAAYmB,IACfxO,EAAIzE,KAAKgS,iBAAmB0D,EAAE1D,iBAC9B,MACF,KAAKF,EAAAA,GAAYpK,MAAO,CACtB,MAAMuK,EAAQ3U,KAAKmK,OAAO3H,MAAOkR,GAAM0E,EAAEzD,QAAUjB,EAAEzR,KAEjD0S,GACFxN,EAAIzE,KAAKgS,iBAAmBC,EAAMD,iBAClCvN,EAAIpE,SAAS6D,YAAc,CAAE,CAAC3D,EAAAA,EAAgB4E,UAAW8M,EAAM1S,KAE/DkF,EAAIpE,SAAS6D,YAAc,CAAE,CAAC3D,EAAAA,EAAgB4E,UAAW,IAG3D,KACF,EAGA,OAAOV,CACT,EAEAkV,eAAAA,CAAgBC,GACd,OAAOA,EAAIza,KAAMI,GAAOjC,KAAKgC,YAAYC,KAAK0M,QAASlM,QAAYG,IAANH,GAC/D,EAEAqY,cAAAA,CAAe1C,GACb,MAAMyC,EAAa,CAAC,EACdvb,EAAO8Y,EAAE9Y,KAWf,OATAub,EAAWvb,GAAQ,CAAC,EAEhB8Y,EAAEmE,aACJ1B,EAAW0B,WAAanE,EAAEmE,YAG5B1B,EAAWrD,MAAQY,EAAEZ,MACrBqD,EAAWha,KAAOuX,EAAEvX,KAEbga,CACT,EAEAD,YAAAA,CAAaxC,GACX,MAAMjR,EAAM,CAAEtG,KAAMuX,EAAEvX,MAQtB,OANIuX,EAAEf,MACJlQ,EAAImQ,IAAM,CAAC,EAEXnQ,EAAIsQ,OAAS,CAAExI,YAAamJ,EAAEnJ,aAGzB9H,CACT,EAEAqV,cAAAA,CAAe9d,GACbsB,KAAKoB,WAAa1C,CACpB,EAEA+d,iBAAAA,CAAkB/d,GAChBsB,KAAKuN,cAAgB7O,CACvB,EAEA+c,sBAAAA,CAAuBiB,GACrB,IACE,MAAMC,EAAoBrb,EAAAA,GAAAA,cAAmBob,GAC1CE,IAAI,wBACHC,UAAY,GAEVC,EAAU9c,KAAKqc,gBAAgBrc,KAAK+M,QAE1C,OAAO4P,EAAkBjU,OAAS,IAAI,IAAI2S,IAAI,IAAIyB,KAAYH,KAAuBG,CACvF,CAAE,MAAO/Y,GACP,MAAO,EACT,CACF,EAMAgZ,iBAAAA,CAAkBC,EAAKC,GACrB,IACE,MAAMnb,EAAOkb,EAAIrB,MAAM,KAAKpa,MAAM,GAC5BQ,EAAMD,GAAMC,IACZZ,IAA0BY,GAAKH,eAAeD,SAAS,gBACvDub,EAAcnb,EAAIkF,SAAWgW,EAAMA,EAAMvU,OAAS,GAEpD3G,GAAOZ,GAAyB+b,GAGlCF,EAAIpB,SAASqB,EAEjB,CAAE,MAAOlZ,GAAI,CACf,EAEA8X,QAAAA,CAASnK,GACP,MAAM,OAAEtO,EAAM,YAAE/B,GAAgBqQ,EAC1BrO,EAAYrD,KAAKmD,YAAYC,GAC7B+Z,EAAe9b,EAAY4W,WAC3BmF,EAAe9b,EAAAA,GAAAA,MAAW6b,GAChC,IAAI3c,EAAW4c,GAAc5c,UAAY,GACrCC,EAAS2c,GAAc3c,QAAU,GAYrC,GAVAY,EAAYqa,MAAM,CAAC,mBAAmB,GAElCxX,MAAMC,QAAQ3D,GACXA,EAASmB,SAAS,qBACrBnB,EAASwI,KAAK,oBAGhBxI,EAAWF,EAAAA,GAASE,SAGlB0D,MAAMC,QAAQ1D,GAAS,CACzB,IAAI4c,GAAa,EACjB,MAAMC,EAAgB7c,EAAO+B,MAAOyB,GAAMC,MAAMC,QAAQF,IAAMA,EAAEG,KAAK,OAASf,EAAU5C,OAAO,GAAG2D,KAAK,OAEjGmZ,EAAmB9c,EAAO+B,MAAM,CAACyB,EAAG4Q,OACpC3Q,MAAMC,QAAQF,IAAMA,EAAEG,KAAK,OAASpE,KAAK0D,iBAAiBN,GAAQgB,KAAK,QACzEiZ,EAAYxI,GAEL,KAMP0I,EACF9c,EAAO4c,GAAaha,EAAU5C,OAAO,GAC3B6c,GACV7c,EAAOuI,KAAK3F,EAAU5C,OAAO,GAEjC,MACEA,EAAS4C,EAAU5C,OAiBrB,OAdID,EAASkI,OAAS,EACpBrH,EAAYqa,MAAM,CAAC,YAAalb,IAEhCa,EAAYqa,MAAM,CAAC,YAAa,IAChC1b,KAAK+c,kBAAkB1b,EAAa,CAAC,aACrCrB,KAAK+c,kBAAkB1b,EAAa,CAAC,oBAGnCZ,EAAOiI,OAAS,EAClBrH,EAAYqa,MAAM,CAAC,UAAWjb,GAE9BT,KAAK+c,kBAAkB1b,EAAa,CAAC,WAGhCA,CACT,EAEAya,SAAAA,CAAUpK,GACR,MAAM,OAAEtO,EAAM,YAAE/B,EAAW,cAAEmc,GAAgB,GAAU9L,EAEjD+L,EAAwBzd,KAAKmC,OAAOC,QAAQ,kBAAkBsb,EAAAA,GAAY1d,KAAKkO,qBAAqBrO,MAAM8d,WAAa,GAEvHR,EAAe9b,EAAY4W,WAC3BmF,EAAe9b,EAAAA,GAAAA,MAAW6b,GAC1B3c,EAAW4c,GAAc5c,UAAY,GACrCC,EAAS2c,GAAc3c,QAAU,GAEvC,GAAIyD,MAAMC,QAAQ3D,IAAagd,EAAe,CAC5C,MAAMI,EAAwB5d,KAAKiI,cAAcwV,GAEjD,IAAK,IAAII,EAAI,EAAGA,EAAIrd,EAASkI,OAAQmV,IACf,qBAAhBrd,EAASqd,KACL3Z,MAAMC,QAAQyZ,GAAuBpd,WAAaod,EAAsBpd,SAASmB,SAAS,qBAC9FnB,EAASsd,OAAOD,EAAG,GAI3B,CAEA,GAAI3Z,MAAMC,QAAQ1D,GAAS,CACzB,MAAM4C,EAAYrD,KAAKmD,YAAYC,GAEnC,IAAK,IAAIya,EAAI,EAAGA,EAAIpd,EAAOiI,OAAQmV,IAC7B3Z,MAAMC,QAAQ1D,EAAOod,KAAOpd,EAAOod,GAAGzZ,KAAK,OAASf,EAAU5C,OAAO,GAAG2D,KAAK,MAC/E3D,EAAOqd,OAAOD,EAAG,EAGvB,CAgBA,OAdIrd,EAASkI,OAAS,EACpBrH,EAAYqa,MAAM,CAAC,YAAalb,IAEhCa,EAAYqa,MAAM,CAAC,YAAa,IAChC1b,KAAK+c,kBAAkB1b,EAAa,CAAC,aACrCrB,KAAK+c,kBAAkB1b,EAAa,CAAC,oBAGnCZ,EAAOiI,OAAS,EAClBrH,EAAYqa,MAAM,CAAC,UAAWjb,GAE9BT,KAAK+c,kBAAkB1b,EAAa,CAAC,WAGhCA,CACT,EAEAyX,kBAAAA,CAAmBjY,GACjB,OAAOA,EAAO,GAAIA,MAAU0T,EAAAA,EAAAA,IAAU,GAAGgE,qBAAmB3V,CAC9D,EAEAmb,wBAAAA,CAAyBC,GACvB,MAAMnd,EAAOmd,EAASjb,SAASlC,KACzBod,EAAOD,EAASC,KAChBC,EAAale,KAAKuJ,eAAiBjH,EAAAA,GAAI0I,GAAK,iBAAmB,0BAC/DmT,EAAMH,GAAUjb,UAAUob,IAEhC,MAAO,CAAC,CACNtd,OACAod,OACAE,MACAD,cAEJ,EAEA,gBAAME,CAAWtb,GACf,IAAKA,GAAIJ,OAAS1C,KAAKqG,YAAcrG,KAAK2Q,UACxC,OAAO,EAGT,IAAIpL,EAASvF,KAAKwF,UAAU1C,EAAGJ,OAG1B6C,GAAUvF,KAAKqe,QAAUre,KAAKsG,YAEjCf,EAASvF,KAAKsG,WAGXf,IAAUvF,KAAK4Q,gBAClBrL,QAAevF,KAAKmC,OAAOwH,SAAS,mBAAoB,CACtD5G,SAAU,CACRlC,KAAiBb,KAAKqG,WACtBuI,UAAiB5O,KAAKtB,MAAMqE,SAAS6L,UACrC5L,OAAiB,CAAE,CAACC,EAAAA,EAAgBqb,YAAa,aACjDC,gBAAiBve,KAAK+d,yBAAyBjb,IAEjDxD,KAAM8G,EAAAA,MAIV,IACMb,IAEGvF,KAAKiG,yBAA4BjG,KAAKkG,6BACzCX,EAAOiZ,QAAQ,WAAYxe,KAAKyF,UAAY,IAC5CF,EAAOiZ,QAAQ,cAAexe,KAAKuN,eAAiB,UAC9ChI,EAAOkZ,QAGnB,CAAE,MAAO1a,GACP,OAAO2a,QAAQC,OAAO5a,EACxB,CACF,EAEA,2BAAM6a,CAAsB9b,GAC1B,IAAKA,GAAIJ,KACP,OAAO,EAIT,MAAMmc,EAAS,GAEf,IAAK,MAAM3f,KAAOc,KAAK2G,kBAAmB,CACxC,IAAIL,EAAYpH,EAAIoH,UAkBpB,GAhBKA,IAAatG,KAAK4Q,gBACrBtK,QAAkBtG,KAAKmC,OAAOwH,SAAS,mBAAoB,CACzD5G,SAAU,CACRlC,KAAiB3B,EAAImH,WACrBuI,UAAiB9L,EAAGC,SAAS6L,UAC7B5L,OAAiB,CAAE,CAACC,EAAAA,EAAgBqb,YAAa,aACjDC,gBAAiBve,KAAK+d,yBAAyBjb,IAEjDxD,KAAM8G,EAAAA,MAINlH,EAAI+H,SAAW+T,EAAAA,GAAmBC,WACpC3U,EAAUkY,QAAQtf,EAAIkI,SAAUlI,EAAImI,aAGlCnI,EAAI+H,SAAW+T,EAAAA,GAAmBE,WACpC,IAAK,MAAM4D,KAAY5f,EAAIqI,QAAS,CAClC,MAAMwX,GAAW/e,KAAKmC,OAAOC,QAAQ,iBAAiBE,EAAAA,GAAIC,MAAQ,IAAIC,MAAMgE,GAAMA,EAAEvE,KAAO6c,IAE3FxY,EAAUkY,QAAQ,GAAIO,EAAQhc,SAAS6L,aAAemQ,EAAQhc,SAASlC,OAASke,EAAQrc,KAAKC,UAC/F,CAGFkc,EAAO7V,KAAK1C,EACd,CAEA,IACE,IAAK,MAAM0X,KAAYa,QACfb,EAASS,MAEnB,CAAE,MAAO1a,GACP,OAAO2a,QAAQC,OAAO5a,EACxB,CACF,EAEAib,8BAAAA,GACE,MAAMC,EAAS,GAEf,IAAK,IAAIpB,EAAI,EAAGA,EAAI7d,KAAK2G,kBAAkB+B,OAAQmV,IAAK,CACtD,MAAM3e,EAAMc,KAAK2G,kBAAkBkX,GAC7B5W,EAAS/H,EAAI+H,OAEnB,GAAIA,IAAW+T,EAAAA,GAAmBC,UAAW,CAC3C,IAAK/b,EAAIkI,SAAU,CACjB,MAAM8X,EAAYlf,KAAK8P,EAAE,2CACnBqP,EAAUnf,KAAK8P,EAAE,sBAAuB,CAAE/N,IAAKmd,IAErDD,EAAOjW,KAAKmW,EACd,CAEA,IAAKjgB,EAAImI,YAAa,CACpB,MAAM6X,EAAYlf,KAAK8P,EAAE,2CACnBqP,EAAUnf,KAAK8P,EAAE,sBAAuB,CAAE/N,IAAKmd,IAErDD,EAAOjW,KAAKmW,EACd,CAEA,GAAIjgB,EAAImI,aAAenI,EAAImI,YAAYqB,OAAS,EAAG,CACjD,MAAMwW,EAAYlf,KAAK8P,EAAE,2CACnBqP,EAAUnf,KAAK8P,EAAE,wBAAyB,CAAE/N,IAAKmd,EAAWE,IAAK,MAEvEH,EAAOjW,KAAKmW,EACd,CACF,KAAO,CACL,IAAKjgB,EAAIoI,OAA8B,IAArBpI,EAAIoI,MAAMoB,OAAc,CACxC,MAAMwW,EAAYlf,KAAK8P,EAAE,2CACnBqP,EAAUnf,KAAK8P,EAAE,sBAAuB,CAAE/N,IAAKmd,IAErDD,EAAOjW,KAAKmW,EACd,CAEA,IAAKjgB,EAAIqI,SAAkC,IAAvBrI,EAAIqI,QAAQmB,OAAc,CAC5C,MAAMwW,EAAYlf,KAAK8P,EAAE,8CACnBqP,EAAUnf,KAAK8P,EAAE,sBAAuB,CAAE/N,IAAKmd,IAErDD,EAAOjW,KAAKmW,EACd,CACF,CAEA,GAAIF,EAAOvW,OAAS,EAClB,KAEJ,CAEA,OAAOuW,CACT,EAEAzM,oBAAAA,CAAqB9P,GACnB,MAAMyE,EAAM,GAUZ,OARIzE,EAAK6B,SAAS7B,KAAKqD,SACrBrD,EAAK6B,SAAS7B,KAAKqD,QAAQvC,SAASwC,IAC9BA,GAAGuP,uBAAuBC,WAC5BrO,EAAI6B,KAAKhD,EAAEuP,sBAAsBC,UACnC,IAIGrO,CACT,EAEAkY,gBAAAA,CAAiBD,GACf,MAAME,EAAWtf,KAAKqE,mBAAmBrE,KAAK0C,MACxC4B,EAAStE,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOC,SAASH,QAAU,GAEjE,GAAI8a,IAAQE,EACNhb,EAAOoE,OAAS,EAClBpE,EAAO0E,KAAKrI,EAAAA,GAAW,IAEvBlB,OAAO8f,OAAOvf,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAS,CACpDH,OAAQ,CACN3D,EAAAA,GAAW,WAIZ,IAAKye,EAAK,CACf,MAAMvK,EAAQvQ,EAAO+Y,WAAW5a,GAAMiC,IAAQjC,EAAG9B,EAAAA,GAAW,MAExD2e,GAA8B,IAAlBhb,EAAOoE,cACd1I,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAQ,UACrC6a,IACThb,EAAOwZ,OAAOjJ,EAAO,GACrB7U,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAQ,UAAYH,EAEvD,CACF,EAEAkb,aAAAA,CAAcC,EAAO,CAAE3a,KAAK,EAAOI,YAAY,IAC7C,GAAIua,EAAK3a,KAAO2a,EAAKva,YACnBwa,EAAAA,EAAAA,IAAI1f,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAQ,wBAAwB,IAC5Dkb,EAAAA,EAAAA,IAAI1f,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAQ,sCAAsC,QACrE,GAAIib,EAAK3a,MAAQ2a,EAAKva,WAAY,CAGvC,WACSlF,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOmb,SAASC,IAAI,WACnD,MAAMC,EAA6E,IAApEpgB,OAAO+H,KAAKxH,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOmb,SAASC,KAAKlX,OAEpEmX,UACK7f,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOmb,SAAS,MAEnD,CAAE,MAAO5b,GAAI,EACb2b,EAAAA,EAAAA,IAAI1f,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAQ,sCAAsC,EAC5E,aACSxE,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAO,mBAC/BxE,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOmb,SAAS,MAEnD,EAEAG,aAAAA,CAAcphB,GACRA,GACFghB,EAAAA,EAAAA,IAAI1f,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOY,IAAK,yBAAyB,UAE1DpF,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOY,IAAI,wBAE9C,EAEA2a,MAAAA,CAAO9R,GACDA,GACFyR,EAAAA,EAAAA,IAAI1f,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAS,MAAO,CAAC,UAE7CzE,KAAK0C,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAQ,MAElD,EAEAub,qBAAAA,CAAsBnX,EAAM,IAC1B,MAAM8T,EAAoB3c,KAAKmI,mBAAmBnI,KAAKoB,YAEvDyH,EAAIhH,KAAKI,IACP,MAAM4S,EAAQ8H,EAAkBU,WAAW3e,GAAUA,IAAUsB,KAAKgC,YAAYC,KAE5E4S,GAAS,GACX8H,EAAkBmB,OAAOjJ,EAAO,EAClC,IAGF,MAAMoL,EAAejgB,KAAKiI,cAAcjI,KAAKoB,YAE7C6e,EAAa7X,oBAAsBuU,EAEF,IAA7BA,EAAkBjU,eACbuX,EAAa7X,oBAGlB8X,IAAQD,GACVjgB,KAAK,mBAAgB4C,EAErB5C,KAAK,cAAgB8D,IAAAA,KAAYmc,GAGnCjgB,KAAKkT,mBACP,EAEAA,iBAAAA,GACElT,KAAKmgB,WAAU,KACbngB,KAAKogB,MAAMC,YAAYC,aAAa,GAExC,EAEAC,cAAAA,GACEvgB,KAAK4N,cAAgB5N,KAAK4N,YAC5B,EAEA4S,WAAAA,CAAY9hB,GACLA,IACHsB,KAAKwd,eAAgB,EAEzB,EAEAiD,oBAAAA,CAAqBnhB,EAAM2C,GACzB,GAAa,SAAT3C,EAAiB,CACnB,MAAMohB,EAAkB1gB,KAAKoN,aAE7BpN,KAAKkO,mBAAqBjM,EAC1BjC,KAAKmgB,WAAU,KACTO,IACF1gB,KAAKoN,aAAesT,EACtB,GAEJ,CACF,EAEAC,cAAAA,CAAejiB,EAAQ,CAAC,GACtB,MAAM,OAAEoP,GAAWpP,EAEnBsB,KAAK,kBAAoB8N,CAC3B,EAEA8S,mCAAAA,CAAoCliB,GAClCsB,KAAK,iCAAmCtB,CAC1C,GAGFoB,MAAO,CACL2N,SAAU,CACR1N,OAAAA,CAAQoc,EAAK0E,GACX,GAAI3c,MAAMC,QAAQgY,GAAM,CACtB,MAAM3O,EAAU2O,EAAI,IAAIxH,MAClBA,EAAQ3U,KAAKmK,OAAO3H,MAAOkR,GAAMlG,IAAYkG,EAAEzR,KAC/CmB,EAASuR,GAAOmM,YAEhBC,EAAaF,EAAI,IAAIlM,MAEvB3U,KAAK6Q,UAAYkQ,IAAevT,GAAWA,IAC7CxN,KAAKoD,OAASA,EAElB,CACF,GAGFkD,UAAW,CACTvG,OAAAA,CAAQwF,GACFA,GAAUvF,KAAKuJ,eAAiBjH,EAAAA,GAAIuP,SACtC7R,KAAKqG,WAAad,GAAQxC,SAASlC,KAEvC,EACAV,WAAW,EACX6gB,MAAW,GAGbrQ,SAAAA,CAAUyO,GACJA,IACFpf,KAAK,UAAY,GACjBA,KAAK,mBAAgB4C,EACrB5C,KAAK,iBAAkB,EAE3B,EAEAsN,gBAAAA,CAAiB8R,GACfpf,KAAKqf,iBAAiBD,EACxB,EAEApR,UAAAA,CAAWoR,GACTpf,KAAKwf,cAAc,CAAE1a,IAAKsa,EAAKla,WAAYlF,KAAKkF,YAClD,EAEAA,UAAAA,CAAWka,GACTpf,KAAKwf,cAAc,CAAE1a,IAAK9E,KAAKgO,WAAY9I,WAAYka,GACzD,EAEA7Q,UAAAA,CAAW7P,GACTsB,KAAK8f,cAAcphB,EACrB,EAEAuP,UAAAA,CAAWmR,GACTpf,KAAK+f,OAAOX,EACd,EAEAhS,aAAc,CAOZrN,OAAAA,CAAQoc,GACN,GAAInc,KAAK6N,YAAa,CACpB,IAAI1G,EAAMnH,KAAK2X,YAAY,CACzBvK,aAAc+O,EAAK/Y,OAAQpD,KAAKoD,OAAQoa,cAAexd,KAAKwd,gBAG9D,GAAIrB,EAAK,CACP,MAAM8E,EAAkBjhB,KAAKmB,sBAAsBgG,GAE9C8Z,IACH9Z,EAAM,kBAAmBA,IAE7B,CAEAnH,KAAK,cAAgBmH,EACrBnH,KAAKkT,mBACP,CACAlT,KAAK6N,aAAc,EACnB7N,KAAKwd,eAAgB,CACvB,GAGFpa,MAAAA,CAAO+Y,GACL,MAAMhV,EAAMnH,KAAK2X,YAAY,CAAEvK,aAAcpN,KAAKoN,aAAchK,OAAQ+Y,IAExEnc,KAAK,cAAgBmH,EACrBnH,KAAKkT,mBACP,EAEA9R,UAAAA,CAAW+a,EAAK0E,GACd,MAAMld,EAAkB3D,KAAK2D,gBAAgBwY,EAAKnc,KAAKoD,OAAQpD,KAAKoN,cAEhEzJ,IAAoB3D,KAAKoN,eAC3BpN,KAAK6N,aAAc,EACnB7N,KAAKoN,aAAezJ,EAExB,EAEAoJ,MAAAA,CAAOoP,EAAK0E,GACV,MAAMK,EAAQC,IAAWN,EAAK1E,GAE1B+E,EAAMxY,QAAU1I,KAAKqe,QACvBre,KAAKggB,sBAAsBkB,EAE/B,G","sources":["webpack://harvester-1.0.1/../../../../../../temp/dashboard/shell/components/formatter/BadgeStateFormatter.vue","webpack://harvester-1.0.1/../../../../../../temp/dashboard/shell/components/formatter/BadgeStateFormatter.vue?edab","webpack://harvester-1.0.1/./mixins/harvester-vm/impl.js","webpack://harvester-1.0.1/./mixins/harvester-vm/index.js"],"sourcesContent":["<script>\nimport { BadgeState } from '@components/BadgeState';\nimport { colorForState, stateDisplay } from '@shell/plugins/dashboard-store/resource-class';\nexport default {\n  components: { BadgeState },\n  props:      {\n    value: {\n      type:    String,\n      default: ''\n    },\n    row: {\n      type:     Object,\n      required: true\n    },\n    col: {\n      type:    Object,\n      default: () => {}\n    },\n\n    arbitrary: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      stateDisplay:    '',\n      stateBackground: ''\n    };\n  },\n\n  watch: {\n    value: {\n      handler() {\n        if (this.arbitrary) {\n          const color = colorForState(this.value);\n\n          this.stateDisplay = stateDisplay(this.value);\n          this.stateBackground = color.replace('text-', 'bg-');\n        }\n      },\n      immediate: true\n    }\n  }\n};\n</script>\n\n<template>\n  <div>\n    <div v-if=\"arbitrary\">\n      <BadgeState\n        v-if=\"value\"\n        :color=\"stateBackground\"\n        :label=\"stateDisplay\"\n      />\n    </div>\n    <BadgeState\n      v-else\n      :value=\"row\"\n    />\n  </div>\n</template>\n","import { render } from \"./BadgeStateFormatter.vue?vue&type=template&id=c28a85da\"\nimport script from \"./BadgeStateFormatter.vue?vue&type=script&lang=js\"\nexport * from \"./BadgeStateFormatter.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../../../harvester/extensions/101/harvester-ui-extension/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport { clone } from '@shell/utils/object';\nimport { SECRET } from '@shell/config/types';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport { OS } from './index';\n\nexport const QGA_JSON = {\n  package_update: true,\n  packages:       ['qemu-guest-agent'],\n  runcmd:         [\n    [\n      'systemctl',\n      'enable',\n      '--now',\n      'qemu-guest-agent.service'\n    ]\n  ]\n};\n\nexport const QGA_MAP = { default: 'qemu-guest-agent.service' };\n\nexport const USB_TABLET = [{\n  bus:  'usb',\n  name: 'tablet',\n  type: 'tablet'\n}];\n\nexport const SSH_EXISTING_TYPE = {\n  EXISTING_ALL:             'EXISTING_ALL',\n  EXISTING_ONLY_ANNOTATION: 'EXISTING_ANNOTATION',\n  EXISTING_ONLY_CLOUD:      'EXISTING_CLOUD',\n};\n\nexport default {\n  methods: {\n    hasCloudConfigComment(userScript) {\n      // Check that userData contains: #cloud-config\n      const userDataDoc = userScript ? YAML.parseDocument(userScript) : YAML.parseDocument({});\n      const items = userDataDoc?.contents?.items || [];\n\n      let exist = false;\n\n      if (userDataDoc?.comment === 'cloud-config' || userDataDoc?.comment?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      if (userDataDoc?.commentBefore === 'cloud-config' || userDataDoc?.commentBefore?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      items.map((item) => {\n        const key = item.key;\n\n        if (key?.commentBefore === 'cloud-config' || key?.commentBefore?.includes('cloud-config\\n')) {\n          exist = true;\n        }\n      });\n\n      return exist;\n    },\n\n    getSSHValue(id) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const sshs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      return sshs.find( (O) => O.id === id)?.spec?.publicKey || undefined;\n    },\n\n    getOsType(vm) {\n      return vm.metadata?.labels?.[HCI_ANNOTATIONS.OS];\n    },\n\n    getMatchQGA(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n      let hasCustomQGA = false;\n\n      OS.forEach((O) => {\n        if (O.match) {\n          hasCustomQGA = O.match.find((type) => type === osType);\n        }\n      });\n\n      if (hasCustomQGA) {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP[osType];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      }\n\n      return _QGA_JSON;\n    },\n\n    getSimilarRuncmd(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n\n      if (osType === 'openSUSE') {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['suse'];\n      }\n\n      return _QGA_JSON.runcmd[0];\n    },\n\n    hasInstallAgent(userScript, osType, oldValue) {\n      let dataFormat = {};\n      const _QGA_JSON = this.getMatchQGA(osType);\n\n      try {\n        dataFormat = jsyaml.load(userScript) || {};\n      } catch (e) {\n        new Error('Function(hasInstallAgent) error');\n\n        return oldValue;\n      }\n\n      return dataFormat?.packages?.includes('qemu-guest-agent') && !!dataFormat?.runcmd?.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n    },\n\n    isInstallUSBTablet(spec) {\n      const inputs = spec?.template?.spec?.domain?.devices?.inputs;\n\n      if (Array.isArray(inputs)) {\n        return !!inputs.find((O) => {\n          return isEqual(O, USB_TABLET[0]);\n        });\n      } else {\n        return false;\n      }\n    },\n\n    isEfiEnabled(spec) {\n      return !!(spec?.template?.spec?.domain?.firmware?.bootloader?.efi);\n    },\n\n    isTpmEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm ;\n    },\n\n    isSecureBoot(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.secureBoot;\n    },\n\n    isCpuPinning(spec) {\n      return !!spec?.template?.spec?.domain?.cpu?.dedicatedCpuPlacement;\n    },\n\n    getCloudInitNoCloud(spec) {\n      const secret = this.getSecret(spec);\n      let userData = secret?.decodedData?.userdata;\n      let networkData = secret?.decodedData?.networkdata;\n\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n\n      // If the value is not found inside the secret, the data may be written directly in the yaml\n      if (cloudInitNoCloud?.userData) {\n        userData = cloudInitNoCloud.userData;\n        this.saveUserDataAsClearText = true;\n      }\n\n      if (cloudInitNoCloud?.networkData) {\n        networkData = cloudInitNoCloud.networkData;\n        this.saveNetworkDataAsClearText = true;\n      }\n\n      return { userData, networkData };\n    },\n\n    getSecret(spec) {\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n\n      const secretName = cloudInitNoCloud?.secretRef?.name || cloudInitNoCloud?.networkDataSecretRef?.name;\n\n      const secret = secrets.find((s) => s.metadata.name === secretName);\n\n      return secret;\n    },\n\n    getAccessCredentials(spec) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n      const credentials = spec?.template?.spec?.accessCredentials || [];\n      const annotations = JSON.parse(spec.template.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] || '[]');\n\n      return credentials.map((c) => {\n        const source = !!c.userPassword ? 'userPassword' : 'sshPublicKey';\n        const secretName = c[source]?.source?.secret?.secretName;\n        const secretRef = secrets.find((s) => s.metadata.name === secretName);\n        const out = {\n          source, username: '', newPassword: '', users: [], sshkeys: [], secretName, secretRef\n        };\n\n        if (!secretRef) {\n          out.secretRef = undefined;\n        } else if (source === 'userPassword') {\n          const username = Object.keys(secretRef?.data)[0];\n          const newPassword = secretRef.decodedData[username];\n\n          out.username = username;\n          out.newPassword = newPassword;\n        } else {\n          const users = c[source].propagationMethod.qemuGuestAgent.users;\n          const sshkeys = annotations?.[secretName];\n\n          out.users = users;\n          out.sshkeys = sshkeys;\n        }\n\n        return out;\n      });\n    },\n\n    getRootImageId(vm) {\n      const volumes = parseVolumeClaimTemplates(vm);\n\n      return volumes?.[0]?.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] || '';\n    },\n\n    getSSHFromAnnotation(spec) {\n      const ids = spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.SSH_NAMES] || '[]';\n\n      return JSON.parse(ids);\n    },\n\n    convertToJson(script = '') {\n      let out = {};\n\n      try {\n        out = jsyaml.load(script);\n      } catch (e) {\n        new Error('Function(convertToJson) error');\n      }\n\n      return out;\n    },\n\n    getSSHFromUserData(userData) {\n      return this.convertToJson(userData)?.ssh_authorized_keys || [];\n    },\n\n    compareSSHValue(a = '', b = '') {\n      const r = /(\\r\\n\\t|\\n|\\r\\t)|(\\s*)/gm;\n\n      return a.replace(r, '') === b.replace(r, '');\n    },\n\n    mergeAllSSHs(spec) {\n      const keys = this.getSSHFromAnnotation(spec);\n      const { userScript: userData } = this.getCloudInitNoCloud(spec);\n\n      if (!keys?.length < 0 && !userData) {\n        return [];\n      }\n\n      let out = [];\n\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const allSSHs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      out = (keys || []).map((id) => {\n        const hasSSHResource = allSSHs.find((ssh) => ssh.id === id);\n\n        if (hasSSHResource) {\n          return {\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          };\n        } else {\n          return {\n            id,\n            data: id,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_ANNOTATION\n          };\n        }\n      });\n\n      const _userDataSSH = this.getSSHFromUserData(userData);\n\n      _userDataSSH.map( (sshValue) => {\n        const hasSSHResource = allSSHs.find((ssh) => this.compareSSHValue(sshValue, ssh.spec?.publicKey));\n\n        if (hasSSHResource && !out.find((O) => O.id === hasSSHResource.id)) {\n          out.push({\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          });\n        } else if (!hasSSHResource) {\n          out.push({\n            id:   'Unknown',\n            data: sshValue,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_CLOUD\n          });\n        }\n      });\n\n      return out;\n    },\n  },\n};\n","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport difference from 'lodash/difference';\n\nimport { sortBy } from '@shell/utils/sort';\nimport { set } from '@shell/utils/object';\n\nimport { allHash } from '@shell/utils/promise';\nimport { randomStr } from '@shell/utils/string';\nimport { base64Decode } from '@shell/utils/crypto';\nimport { formatSi, parseSi } from '@shell/utils/units';\nimport { _CLONE, _CREATE, _VIEW } from '@shell/config/query-params';\nimport {\n  PV, PVC, STORAGE_CLASS, NODE, SECRET, CONFIG_MAP, NETWORK_ATTACHMENT, NAMESPACE, LONGHORN\n} from '@shell/config/types';\nimport { HOSTNAME } from '@shell/config/labels-annotations';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { uniq } from '@shell/utils/array';\nimport {\n  ADD_ONS, SOURCE_TYPE, ACCESS_CREDENTIALS, maintenanceStrategies, runStrategies\n} from '../../config/harvester-map';\nimport { HCI_SETTING } from '../../config/settings';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport impl, { QGA_JSON, USB_TABLET } from './impl';\n\nconst LONGHORN_V2_DATA_ENGINE = 'longhorn-system/v2-data-engine';\n\nexport const MANAGEMENT_NETWORK = 'management Network';\n\nexport const OS = [{\n  label: 'Windows',\n  value: 'windows'\n}, {\n  label: 'Linux',\n  value: 'linux'\n}, {\n  label: 'SUSE Linux Enterprise',\n  value: 'SLEs'\n}, {\n  label: 'Debian',\n  value: 'debian'\n}, {\n  label: 'Fedora',\n  value: 'fedora'\n}, {\n  label: 'Gentoo',\n  value: 'gentoo'\n}, {\n  label: 'Oracle',\n  value: 'oracle'\n}, {\n  label: 'Red Hat',\n  match: ['redhat', 'rhel'],\n  value: 'redhat'\n}, {\n  label: 'openSUSE',\n  value: 'openSUSE',\n}, {\n  label: 'Ubuntu',\n  value: 'ubuntu'\n}, {\n  label: 'Other Linux',\n  match: ['centos'],\n  value: 'otherLinux'\n}];\n\nexport const CD_ROM = 'cd-rom';\nexport const HARD_DISK = 'disk';\n\nexport default {\n  mixins: [impl],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    resourceType: {\n      type:    String,\n      default: ''\n    }\n  },\n\n  async fetch() {\n    const inStore = this.$store.getters['currentProduct'].inStore;\n    const hash = {\n      pvs:               this.$store.dispatch(`${ inStore }/findAll`, { type: PV }),\n      pvcs:              this.$store.dispatch(`${ inStore }/findAll`, { type: PVC }),\n      storageClasses:    this.$store.dispatch(`${ inStore }/findAll`, { type: STORAGE_CLASS }),\n      sshs:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SSH }),\n      settings:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SETTING }),\n      images:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.IMAGE }),\n      versions:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_VERSION }),\n      templates:         this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_TEMPLATE }),\n      networkAttachment: this.$store.dispatch(`${ inStore }/findAll`, { type: NETWORK_ATTACHMENT }),\n      vmis:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMI }),\n      vmims:             this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMIM }),\n      vms:               this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM }),\n      secrets:           this.$store.dispatch(`${ inStore }/findAll`, { type: SECRET }),\n      addons:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.ADD_ONS }),\n      longhornV2Engine:  this.$store.dispatch(`${ inStore }/find`, { type: LONGHORN.SETTINGS, id: LONGHORN_V2_DATA_ENGINE }),\n    };\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](NODE)) {\n      hash.nodes = this.$store.dispatch(`${ inStore }/findAll`, { type: NODE });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.CLUSTER_NETWORK)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.CLUSTER_NETWORK });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.VLAN_CONFIG)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VLAN_CONFIG });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](LONGHORN.VOLUMES)) {\n      hash.longhornVolumes = this.$store.dispatch(`${ inStore }/findAll`, { type: LONGHORN.VOLUMES });\n    }\n\n    const res = await allHash(hash);\n\n    const hasPCISchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.PCI_DEVICE);\n    const hasSRIOVGPUSchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.SR_IOVGPU_DEVICE);\n\n    const enabledAddons = res.addons.reduce((acc, addon) => ({ ...acc, [addon.name]: addon.spec?.enabled }), {});\n\n    this.enabledPCI = hasPCISchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER];\n    this.enabledSriovgpu = hasSRIOVGPUSchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER] && enabledAddons[ADD_ONS.NVIDIA_DRIVER_TOOLKIT_CONTROLLER];\n  },\n\n  data() {\n    const isClone = this.realMode === _CLONE;\n\n    return {\n      OS,\n      isClone,\n      spec:                          null,\n      osType:                        'linux',\n      sshKey:                        [],\n      maintenanceStrategies,\n      maintenanceStrategy:           'Migrate',\n      runStrategies,\n      runStrategy:                   'RerunOnFailure',\n      installAgent:                  true,\n      hasCreateVolumes:              [],\n      installUSBTablet:              true,\n      networkScript:                 '',\n      userScript:                    '',\n      imageId:                       '',\n      diskRows:                      [],\n      networkRows:                   [],\n      machineType:                   '',\n      secretName:                    '',\n      secretRef:                     null,\n      showAdvanced:                  false,\n      deleteAgent:                   true,\n      memory:                        null,\n      cpu:                           '',\n      reservedMemory:                null,\n      accessCredentials:             [],\n      efiEnabled:                    false,\n      tpmEnabled:                    false,\n      secureBoot:                    false,\n      userDataTemplateId:            '',\n      saveUserDataAsClearText:       false,\n      saveNetworkDataAsClearText:    false,\n      enabledPCI:                    false,\n      enabledSriovgpu:               false,\n      immutableMode:                 this.realMode === _CREATE ? _CREATE : _VIEW,\n      terminationGracePeriodSeconds: '',\n      cpuPinning:                    false,\n    };\n  },\n\n  computed: {\n    inStore() {\n      return this.$store.getters['currentProduct'].inStore;\n    },\n\n    images() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.IMAGE);\n    },\n\n    versions() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_VERSION);\n    },\n\n    templates() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_TEMPLATE);\n    },\n\n    pvcs() {\n      return this.$store.getters[`${ this.inStore }/all`](PVC);\n    },\n\n    secrets() {\n      return this.$store.getters[`${ this.inStore }/all`](SECRET);\n    },\n\n    filteredNamespaces() {\n      return this.$store.getters['harvester/all'](NAMESPACE).filter((namespace) => !namespace.isSystem);\n    },\n\n    nodes() {\n      return this.$store.getters['harvester/all'](NODE);\n    },\n\n    nodesIdOptions() {\n      const nodes = this.$store.getters[`${ this.inStore }/all`](NODE);\n\n      const networkNames = this.networkRows.map((n) => n.networkName);\n      const vmNetworks = this.$store.getters[`${ this.inStore }/all`](NETWORK_ATTACHMENT);\n      const selectedVMNetworks = networkNames.map((name) => vmNetworks.find((n) => n.id === name)).filter((n) => n?.id);\n      const clusterNetworks = uniq(selectedVMNetworks.map((n) => n.clusterNetworkResource?.id));\n\n      return nodes.filter((N) => !N.isUnSchedulable).map((node) => {\n        const requireLabelKeys = [];\n        let isNetworkSchedule = true;\n\n        if (clusterNetworks.length > 0) {\n          clusterNetworks.map((clusterNetwork) => {\n            requireLabelKeys.push(`network.harvesterhci.io/${ clusterNetwork }`);\n          });\n        }\n\n        requireLabelKeys.map((requireLabelKey) => {\n          if (node.metadata?.labels?.[requireLabelKey] !== 'true') {\n            isNetworkSchedule = false;\n          }\n        });\n\n        return {\n          label:    isNetworkSchedule ? node.nameDisplay : `${ node.nameDisplay } (${ this.t('harvester.virtualMachine.scheduling.networkNotSupport') })`,\n          value:    node.id,\n          disabled: !isNetworkSchedule,\n        };\n      });\n    },\n\n    defaultStorageClass() {\n      const defaultStorage = this.$store.getters[`${ this.inStore }/all`](STORAGE_CLASS).find( (O) => O.isDefault);\n\n      return defaultStorage;\n    },\n\n    storageClassSetting() {\n      try {\n        const storageClassValue = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.DEFAULT_STORAGE_CLASS)?.value;\n\n        return JSON.parse(storageClassValue);\n      } catch (e) {\n        return {};\n      }\n    },\n\n    customVolumeMode() {\n      return this.storageClassSetting.volumeMode || 'Block';\n    },\n\n    customAccessMode() {\n      return this.storageClassSetting.accessModes || 'ReadWriteMany';\n    },\n\n    isWindows() {\n      return this.osType === 'windows';\n    },\n\n    needNewSecret() {\n      // When creating a template it is always necessary to create a new secret.\n      return this.resourceType === HCI.VM_VERSION || this.isCreate;\n    },\n\n    defaultTerminationSetting() {\n      const setting = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.VM_TERMINATION_PERIOD) || {};\n\n      return Number(setting?.value || setting?.default);\n    },\n\n    affinityLabels() {\n      return {\n        namespaceInputLabel:      this.t('harvesterManager.affinity.namespaces.label'),\n        namespaceSelectionLabels: [\n          this.t('harvesterManager.affinity.thisPodNamespace'),\n          this.t('workload.scheduling.affinity.allNamespaces'),\n          this.t('harvesterManager.affinity.matchExpressions.inNamespaces')\n        ],\n        addLabel:               this.t('harvesterManager.affinity.addLabel'),\n        topologyKeyPlaceholder: this.t('harvesterManager.affinity.topologyKey.placeholder')\n      };\n    },\n  },\n\n  async created() {\n    await this.$store.dispatch(`${ this.inStore }/findAll`, { type: SECRET });\n    this.getInitConfig({ value: this.value, init: this.isCreate });\n  },\n\n  methods: {\n    getInitConfig(config) {\n      const {\n        value, existUserData, fromTemplate = false, init = false\n      } = config;\n\n      const vm = this.resourceType === HCI.VM ? value : this.resourceType === HCI.BACKUP ? this.value.status?.source : value.spec.vm;\n      const volumeBackups = this.resourceType === HCI.BACKUP ? this.value.status?.volumeBackups : null;\n\n      const spec = vm?.spec;\n\n      if (!spec) {\n        return;\n      }\n      const resources = spec.template.spec.domain.resources;\n\n      // If the user is created via yaml, there may be no \"resources.limits\": kubectl apply -f https://kubevirt.io/labs/manifests/vm.yaml\n      if (!resources?.limits || (resources?.limits && !resources?.limits?.memory && resources?.limits?.memory !== null)) {\n        spec.template.spec.domain.resources = {\n          ...spec.template.spec.domain.resources,\n          limits: {\n            ...spec.template.spec.domain.resources.limits,\n            memory: spec.template.spec.domain.resources.requests.memory\n          }\n        };\n      }\n\n      if (!vm.metadata.labels) {\n        vm.metadata.labels = {};\n      }\n      const maintenanceStrategy = vm.metadata.labels?.[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] || 'Migrate';\n\n      const runStrategy = spec.runStrategy || 'RerunOnFailure';\n      const machineType = value.machineType;\n      const cpu = spec.template.spec.domain?.cpu?.cores;\n      const memory = spec.template.spec.domain.resources.limits.memory;\n      const reservedMemory = vm.metadata?.annotations?.[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      const terminationGracePeriodSeconds = spec.template.spec?.terminationGracePeriodSeconds || this.defaultTerminationSetting;\n\n      const sshKey = this.getSSHFromAnnotation(spec) || [];\n\n      const imageId = this.getRootImageId(vm) || '';\n      const diskRows = this.getDiskRows(vm, volumeBackups);\n\n      const networkRows = this.getNetworkRows(vm, { fromTemplate, init });\n      const hasCreateVolumes = this.getHasCreatedVolumes(spec) || [];\n\n      let { userData = undefined, networkData = undefined } = this.getCloudInitNoCloud(spec);\n\n      if (this.resourceType === HCI.BACKUP) {\n        const secretBackups = this.value.status?.secretBackups;\n\n        if (secretBackups) {\n          const secretNetworkData = secretBackups[0]?.data?.networkdata || '';\n          const secretUserData = secretBackups[0]?.data?.userdata || '';\n\n          userData = base64Decode(secretUserData);\n          networkData = base64Decode(secretNetworkData);\n        }\n      }\n      const osType = this.getOsType(vm) || 'linux';\n\n      userData = this.isCreate && !existUserData && !this.isClone ? this.getInitUserData({ osType }) : userData;\n\n      const installUSBTablet = this.isInstallUSBTablet(spec);\n      const installAgent = this.hasInstallAgent(userData, osType, true);\n      const efiEnabled = this.isEfiEnabled(spec);\n      const tpmEnabled = this.isTpmEnabled(spec);\n      const secureBoot = this.isSecureBoot(spec);\n      const cpuPinning = this.isCpuPinning(spec);\n\n      const secretRef = this.getSecret(spec);\n      const accessCredentials = this.getAccessCredentials(spec);\n\n      if (Object.prototype.hasOwnProperty.call(spec, 'running')) {\n        delete spec.running;\n        spec.runStrategy = 'RerunOnFailure';\n      }\n\n      this['spec'] = spec;\n      this['maintenanceStrategy'] = maintenanceStrategy;\n      this['runStrategy'] = runStrategy;\n      this['secretRef'] = secretRef;\n      this['accessCredentials'] = accessCredentials;\n      this['userScript'] = userData;\n      this['networkScript'] = networkData;\n\n      this['sshKey'] = sshKey;\n      this['osType'] = osType;\n      this['installAgent'] = installAgent;\n\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n      this['reservedMemory'] = reservedMemory;\n      this['machineType'] = machineType;\n      this['terminationGracePeriodSeconds'] = terminationGracePeriodSeconds;\n\n      this['installUSBTablet'] = installUSBTablet;\n      this['efiEnabled'] = efiEnabled;\n      this['tpmEnabled'] = tpmEnabled;\n      this['secureBoot'] = secureBoot;\n      this['cpuPinning'] = cpuPinning;\n\n      this['hasCreateVolumes'] = hasCreateVolumes;\n      this['networkRows'] = networkRows;\n      this['imageId'] = imageId;\n\n      this['diskRows'] = diskRows;\n\n      this.refreshYamlEditor();\n    },\n\n    getDiskRows(vm, volBackups) {\n      const namespace = vm.metadata.namespace;\n      const _volumes = vm.spec.template.spec.volumes || [];\n      const _disks = vm.spec.template.spec.domain.devices.disks || [];\n      const _volumeClaimTemplates = parseVolumeClaimTemplates(vm);\n\n      let out = [];\n\n      if (_disks.length === 0) {\n        let bus = 'virtio';\n        let type = HARD_DISK;\n        let size = '10Gi';\n\n        const imageResource = this.images.find( (I) => this.imageId === I.id);\n\n        const isIsoImage = /iso$/i.test(imageResource?.imageSuffix);\n        const imageSize = Math.max(imageResource?.status?.size, imageResource?.status?.virtualSize);\n        const isEncrypted = imageResource?.isEncrypted || false;\n        const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === 'disk-0') || null ;\n\n        if (isIsoImage) {\n          bus = 'sata';\n          type = CD_ROM;\n        }\n\n        if (imageSize) {\n          let imageSizeGiB = Math.ceil(imageSize / 1024 / 1024 / 1024);\n\n          if (!isIsoImage) {\n            imageSizeGiB = Math.max(imageSizeGiB, 10);\n          }\n          size = `${ imageSizeGiB }Gi`;\n        }\n\n        out.push({\n          id:               randomStr(5),\n          source:           SOURCE_TYPE.IMAGE,\n          name:             'disk-0',\n          accessMode:       'ReadWriteMany', // root disk only support LHv1 volume, should be RWX\n          bus,\n          volumeName:       '',\n          size,\n          type,\n          storageClassName: '',\n          image:            this.imageId,\n          volumeMode:       'Block',\n          isEncrypted,\n          volumeBackups,\n        });\n      } else {\n        out = _disks.map( (DISK, index) => {\n          const volume = _volumes.find( (V) => V.name === DISK.name );\n\n          let size = '';\n          let image = '';\n          let source = '';\n          let realName = '';\n          let container = '';\n          let volumeName = '';\n          let accessMode = '';\n          let volumeMode = '';\n          let storageClassName = '';\n          let hotpluggable = false;\n          let dataSource = null;\n\n          const type = DISK?.cdrom ? CD_ROM : DISK?.disk ? HARD_DISK : '';\n\n          if (volume?.containerDisk) { // SOURCE_TYPE.CONTAINER\n            source = SOURCE_TYPE.CONTAINER;\n            container = volume.containerDisk.image;\n          }\n\n          if (volume.persistentVolumeClaim && volume.persistentVolumeClaim?.claimName) {\n            volumeName = volume.persistentVolumeClaim.claimName;\n            const DVT = _volumeClaimTemplates.find( (T) => T.metadata.name === volumeName);\n\n            realName = volumeName;\n            // If the DVT can be found, it cannot be an existing volume\n            if (DVT) {\n              // has annotation (HCI_ANNOTATIONS.IMAGE_ID) => SOURCE_TYPE.IMAGE\n              if (DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] !== undefined) {\n                image = DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID];\n                source = SOURCE_TYPE.IMAGE;\n              } else {\n                source = SOURCE_TYPE.NEW;\n              }\n\n              const dataVolumeSpecPVC = DVT?.spec || {};\n\n              volumeMode = dataVolumeSpecPVC?.volumeMode;\n              accessMode = dataVolumeSpecPVC?.accessModes?.[0];\n              size = dataVolumeSpecPVC?.resources?.requests?.storage || '10Gi';\n              storageClassName = dataVolumeSpecPVC?.storageClassName;\n              dataSource = dataVolumeSpecPVC?.dataSource;\n            } else {\n              // SOURCE_TYPE.ATTACH_VOLUME\n              // Compatible with VMS that have been created before, Because they're not saved in the annotation\n              const allPVCs = this.$store.getters['harvester/all'](PVC);\n              const pvcResource = allPVCs.find( (O) => O.id === `${ namespace }/${ volume?.persistentVolumeClaim?.claimName }`);\n\n              source = SOURCE_TYPE.ATTACH_VOLUME;\n              accessMode = pvcResource?.spec?.accessModes?.[0] || 'ReadWriteMany';\n              size = pvcResource?.spec?.resources?.requests?.storage || '10Gi';\n              storageClassName = pvcResource?.spec?.storageClassName;\n              volumeMode = pvcResource?.spec?.volumeMode || 'Block';\n              volumeName = pvcResource?.metadata?.name || '';\n            }\n\n            hotpluggable = volume.persistentVolumeClaim.hotpluggable || false;\n          }\n\n          const bus = DISK?.disk?.bus || DISK?.cdrom?.bus;\n\n          const bootOrder = DISK?.bootOrder ? DISK?.bootOrder : index;\n\n          const parseValue = parseSi(size);\n\n          const formatSize = formatSi(parseValue, {\n            increment:   1024,\n            addSuffix:   false,\n            maxExponent: 3,\n            minExponent: 3,\n          });\n\n          const pvc = this.pvcs.find((P) => P.id === `${ this.value.metadata.namespace }/${ volumeName }`);\n\n          const volumeStatus = pvc?.relatedPV?.metadata?.annotations?.[HCI_ANNOTATIONS.VOLUME_ERROR];\n\n          const isEncrypted = pvc?.isEncrypted || false;\n          const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === DISK.name) || null;\n\n          return {\n            id:         randomStr(5),\n            bootOrder,\n            source,\n            name:       DISK.name,\n            realName,\n            bus,\n            volumeName,\n            container,\n            accessMode,\n            size:       `${ formatSize }Gi`,\n            volumeMode: volumeMode || this.customVolumeMode,\n            image,\n            type,\n            storageClassName,\n            hotpluggable,\n            volumeStatus,\n            dataSource,\n            namespace,\n            isEncrypted,\n            volumeBackups,\n          };\n        });\n      }\n\n      out = sortBy(out, 'bootOrder');\n\n      return out.filter( (O) => O.name !== 'cloudinitdisk');\n    },\n\n    getNetworkRows(vm, config) {\n      const { fromTemplate = false, init = false } = config;\n\n      const networks = vm.spec.template.spec.networks || [];\n      const interfaces = vm.spec.template.spec.domain.devices.interfaces || [];\n\n      const out = interfaces.map( (I, index) => {\n        const network = networks.find( (N) => I.name === N.name);\n\n        const type = I.sriov ? 'sriov' : I.bridge ? 'bridge' : 'masquerade';\n\n        const isPod = !!network.pod;\n\n        return {\n          ...I,\n          index,\n          type,\n          isPod,\n          newCreateId: (fromTemplate || init) ? randomStr(10) : false,\n          model:       I.model,\n          networkName: isPod ? MANAGEMENT_NETWORK : network?.multus?.networkName,\n        };\n      });\n\n      return out;\n    },\n\n    parseVM() {\n      this.userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      this.parseOther();\n      this.parseAccessCredentials();\n      this.parseNetworkRows(this.networkRows);\n      this.parseDiskRows(this.diskRows);\n    },\n\n    parseOther() {\n      if (!this.spec.template.spec.domain.machine) {\n        this.spec.template.spec.domain['machine'] = { type: this.machineType };\n      } else {\n        this.spec.template.spec.domain.machine['type'] = this.machineType;\n      }\n\n      this.spec.template.spec.domain.cpu.cores = this.cpu;\n      this.spec.template.spec.domain.resources.limits.cpu = this.cpu ? this.cpu.toString() : this.cpu;\n      this.spec.template.spec.domain.resources.limits.memory = this.memory;\n      this.spec.template.spec.terminationGracePeriodSeconds = this.terminationGracePeriodSeconds;\n\n      // parse reserved memory\n      const vm = this.resourceType === HCI.VM ? this.value : this.value.spec.vm;\n\n      if (!this.reservedMemory) {\n        delete vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      } else {\n        vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY] = this.reservedMemory;\n      }\n\n      if (this.maintenanceStrategy === 'Migrate') {\n        delete vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY];\n      } else {\n        vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] = this.maintenanceStrategy;\n      }\n    },\n\n    parseDiskRows(disk) {\n      const disks = [];\n      const volumes = [];\n      const diskNameLables = [];\n      const volumeClaimTemplates = [];\n\n      disk.forEach( (R, index) => {\n        const prefixName = this.value.metadata?.name || '';\n\n        let dataVolumeName = '';\n\n        if (R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n          dataVolumeName = R.volumeName;\n        } else if (this.isClone || !this.hasCreateVolumes.includes(R.realName)) {\n          dataVolumeName = `${ prefixName }-${ R.name }-${ randomStr(5).toLowerCase() }`;\n        } else {\n          dataVolumeName = R.realName;\n        }\n\n        const _disk = this.parseDisk(R, index);\n        const _volume = this.parseVolume(R, dataVolumeName);\n        const _dataVolumeTemplate = this.parseVolumeClaimTemplate(R, dataVolumeName);\n\n        disks.push(_disk);\n        volumes.push(_volume);\n        diskNameLables.push(dataVolumeName);\n\n        if (R.source !== SOURCE_TYPE.CONTAINER) {\n          volumeClaimTemplates.push(_dataVolumeTemplate);\n        }\n      });\n\n      if (!this.secretName || this.needNewSecret) {\n        this.secretName = this.generateSecretName(this.secretNamePrefix);\n      }\n\n      if (!disks.find( (D) => D.name === 'cloudinitdisk') && (this.userData || this.networkData)) {\n        if (!this.isWindows) {\n          disks.push({\n            name: 'cloudinitdisk',\n            disk: { bus: 'virtio' }\n          });\n\n          const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n\n          const cloudinitdisk = {\n            name:             'cloudinitdisk',\n            cloudInitNoCloud: {}\n          };\n\n          if (this.saveUserDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.userData = userData;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.secretRef = { name: this.secretName };\n          }\n\n          if (this.saveNetworkDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.networkData = this.networkScript;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.networkDataSecretRef = { name: this.secretName };\n          }\n\n          volumes.push(cloudinitdisk);\n        }\n      }\n\n      let spec = {\n        ...this.spec,\n        runStrategy: this.runStrategy,\n        template:    {\n          ...this.spec.template,\n          metadata: {\n            ...this.spec?.template?.metadata,\n            annotations: {\n              ...this.spec?.template?.metadata?.annotations,\n              [HCI_ANNOTATIONS.SSH_NAMES]: JSON.stringify(this.sshKey)\n            },\n            labels: {\n              ...this.spec?.template?.metadata?.labels,\n              [HCI_ANNOTATIONS.VM_NAME]: this.value?.metadata?.name,\n            }\n          },\n          spec: {\n            ...this.spec.template?.spec,\n            domain: {\n              ...this.spec.template?.spec?.domain,\n              devices: {\n                ...this.spec.template?.spec?.domain?.devices,\n                disks,\n              },\n            },\n            volumes,\n          }\n        }\n      };\n\n      if (volumes.length === 0) {\n        delete spec.template.spec.volumes;\n      }\n\n      if (this.resourceType === HCI.VM) {\n        if (!this.isSingle) {\n          spec = this.multiVMScheduler(spec);\n        }\n\n        this.value.metadata['annotations'] = {\n          ...this.value.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n          [HCI_ANNOTATIONS.NETWORK_IPS]:           JSON.stringify(this.value.networkIps)\n        };\n\n        this.value.metadata['labels'] = {\n          ...this.value.metadata.labels,\n          [HCI_ANNOTATIONS.CREATOR]: 'harvester',\n          [HCI_ANNOTATIONS.OS]:      this.osType\n        };\n\n        this.value['spec'] = spec;\n        this['spec'] = spec;\n      } else if (this.resourceType === HCI.VM_VERSION) {\n        this.value.spec.vm['spec'] = spec;\n        this.value.spec.vm.metadata['annotations'] = {\n          ...this.value.spec.vm.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n        };\n        this.value.spec.vm.metadata['labels'] = {\n          ...this.value.spec.vm.metadata.labels,\n          [HCI_ANNOTATIONS.OS]: this.osType\n        };\n        this['spec'] = spec;\n      }\n    },\n\n    removeTrailingHyphen(str) {\n      while (str.endsWith('-')) {\n        str = str.slice(0, -1);\n      }\n\n      return str;\n    },\n\n    multiVMScheduler(spec) {\n      const namePrefix = this.removeTrailingHyphen(this.namePrefix);\n\n      spec.template.metadata.labels[HCI_ANNOTATIONS.VM_NAME_PREFIX] = namePrefix;\n\n      const rule = {\n        weight:          1,\n        podAffinityTerm: {\n          topologyKey:   HOSTNAME,\n          labelSelector: { matchLabels: { [HCI_ANNOTATIONS.VM_NAME_PREFIX]: namePrefix } }\n        }\n      };\n\n      return {\n        ...spec,\n        template: {\n          ...spec.template,\n          spec: {\n            ...spec.template.spec,\n            affinity: {\n              ...spec.template.spec.affinity,\n              podAntiAffinity: {\n                ...spec.template.spec?.affinity?.podAntiAffinity,\n                preferredDuringSchedulingIgnoredDuringExecution: [\n                  ...(spec.template.spec?.affinity?.podAntiAffinity?.preferredDuringSchedulingIgnoredDuringExecution || []),\n                  rule\n                ]\n              }\n            }\n          }\n        }\n      };\n    },\n\n    parseNetworkRows(networkRow) {\n      const networks = [];\n      const interfaces = [];\n\n      networkRow.forEach( (R) => {\n        const _network = this.parseNetwork(R);\n        const _interface = this.parseInterface(R);\n\n        networks.push(_network);\n        interfaces.push(_interface);\n      });\n\n      const spec = {\n        ...this.spec.template.spec,\n        domain: {\n          ...this.spec.template.spec.domain,\n          devices: {\n            ...this.spec.template.spec.domain.devices,\n            interfaces,\n          },\n        },\n        networks\n      };\n\n      this.spec.template['spec'] = spec;\n    },\n\n    parseAccessCredentials() {\n      const out = [];\n      const annotations = {};\n      const users = JSON.parse(this.spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] || '[]');\n\n      for (const row of this.accessCredentials) {\n        if (this.needNewSecret) {\n          row.secretName = this.generateSecretName(this.secretNamePrefix);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          users.push(row.username);\n          out.push({\n            userPassword: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { } }\n            }\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          users.push(...row.users);\n          annotations[row.secretName] = row.sshkeys;\n          out.push({\n            sshPublicKey: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { users: row.users } }\n            }\n          });\n        }\n      }\n\n      if (out.length === 0 && !!this.spec.template.spec.accessCredentials) {\n        delete this.spec.template.spec.accessCredentials;\n      } else {\n        this.spec.template.spec.accessCredentials = out;\n      }\n\n      if (users.length !== 0) {\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] = JSON.stringify(Array.from(new Set(users)));\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] = JSON.stringify(annotations);\n      }\n    },\n\n    getMaintenanceStrategyOptionLabel(opt) {\n      return this.t(`harvester.virtualMachine.maintenanceStrategy.options.${ opt.label || opt }`);\n    },\n\n    getInitUserData(config) {\n      const _QGA_JSON = this.getMatchQGA(config.osType);\n\n      const out = jsyaml.dump(_QGA_JSON);\n\n      return `#cloud-config\\n${ out }`;\n    },\n\n    /**\n     * Generate user data yaml which is decide by the \"Install guest agent\",\n     * \"OS type\", \"SSH Keys\" and user input.\n     * @param config\n     */\n    getUserData(config) {\n      try {\n        // https://github.com/eemeli/yaml/issues/136\n        let userDataDoc = this.userScript ? YAML.parseDocument(this.userScript) : YAML.parseDocument({});\n\n        const allSSHAuthorizedKeys = this.mergeSSHAuthorizedKeys(this.userScript);\n\n        if (allSSHAuthorizedKeys.length > 0) {\n          userDataDoc.setIn(['ssh_authorized_keys'], allSSHAuthorizedKeys);\n        } else if (YAML.isCollection(userDataDoc.getIn('ssh_authorized_keys'))) {\n          userDataDoc.deleteIn(['ssh_authorized_keys']);\n        }\n\n        userDataDoc = config.installAgent ? this.mergeQGA({ userDataDoc, ...config }) : this.deleteQGA({ userDataDoc, ...config });\n        const userDataYaml = userDataDoc.toString();\n\n        if (userDataYaml === '{}\\n') {\n          // When the YAML parsed value is '{}\\n', it means that the userData is empty, then undefined is returned.\n          return undefined;\n        }\n\n        return userDataYaml;\n      } catch (e) {\n        console.error('Error: Unable to parse yaml document', e); // eslint-disable-line no-console\n\n        return this.userScript;\n      }\n    },\n\n    updateSSHKey(neu) {\n      this['sshKey'] = neu;\n    },\n\n    updateCpuMemory(cpu, memory) {\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n    },\n\n    parseDisk(R, index) {\n      const out = { name: R.name };\n\n      if (R.type === HARD_DISK) {\n        out.disk = { bus: R.bus };\n      } else if (R.type === CD_ROM) {\n        out.cdrom = { bus: R.bus };\n      }\n\n      out.bootOrder = index + 1;\n\n      return out;\n    },\n\n    parseVolume(R, dataVolumeName) {\n      const out = { name: R.name };\n\n      if (R.source === SOURCE_TYPE.CONTAINER) {\n        out.containerDisk = { image: R.container };\n      } else if (R.source === SOURCE_TYPE.IMAGE || R.source === SOURCE_TYPE.NEW || R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n        out.persistentVolumeClaim = { claimName: dataVolumeName };\n        if (R.hotpluggable) {\n          out.persistentVolumeClaim.hotpluggable = true;\n        }\n      }\n\n      return out;\n    },\n\n    parseVolumeClaimTemplate(R, dataVolumeName) {\n      if (!String(R.size).includes('Gi') && R.size) {\n        R.size = `${ R.size }Gi`;\n      }\n\n      const out = {\n        metadata: { name: dataVolumeName },\n        spec:     {\n          accessModes: [R.accessMode],\n          resources:   { requests: { storage: R.size } },\n          volumeMode:  R.volumeMode\n        }\n      };\n\n      if (R.dataSource) {\n        out.spec.dataSource = R.dataSource;\n      }\n\n      switch (R.source) {\n      case SOURCE_TYPE.ATTACH_VOLUME:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.NEW:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.IMAGE: {\n        const image = this.images.find( (I) => R.image === I.id);\n\n        if (image) {\n          out.spec.storageClassName = image.storageClassName;\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: image.id };\n        } else {\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: '' };\n        }\n\n        break;\n      }\n      }\n\n      return out;\n    },\n\n    getSSHListValue(arr) {\n      return arr.map( (id) => this.getSSHValue(id)).filter( (O) => O !== undefined);\n    },\n\n    parseInterface(R) {\n      const _interface = {};\n      const type = R.type;\n\n      _interface[type] = {};\n\n      if (R.macAddress) {\n        _interface.macAddress = R.macAddress;\n      }\n\n      _interface.model = R.model;\n      _interface.name = R.name;\n\n      return _interface;\n    },\n\n    parseNetwork(R) {\n      const out = { name: R.name };\n\n      if (R.isPod) {\n        out.pod = {};\n      } else {\n        out.multus = { networkName: R.networkName };\n      }\n\n      return out;\n    },\n\n    updateUserData(value) {\n      this.userScript = value;\n    },\n\n    updateNetworkData(value) {\n      this.networkScript = value;\n    },\n\n    mergeSSHAuthorizedKeys(yaml) {\n      try {\n        const sshAuthorizedKeys = YAML.parseDocument(yaml)\n          .get('ssh_authorized_keys')\n          ?.toJSON() || [];\n\n        const sshList = this.getSSHListValue(this.sshKey);\n\n        return sshAuthorizedKeys.length ? [...new Set([...sshList, ...sshAuthorizedKeys])] : sshList;\n      } catch (e) {\n        return [];\n      }\n    },\n\n    /**\n     * @param paths A Object path, e.g. 'a.b.c' => ['a', 'b', 'c']. Refer to https://eemeli.org/yaml/#scalar-values\n     * @returns\n     */\n    deleteYamlDocProp(doc, paths) {\n      try {\n        const item = doc.getIn([])?.items[0];\n        const key = item?.key;\n        const hasCloudConfigComment = !!key?.commentBefore?.includes('cloud-config');\n        const isMatchProp = key.source === paths[paths.length - 1];\n\n        if (key && hasCloudConfigComment && isMatchProp) {\n          // Comments are mounted on the next node and we should not delete the node containing cloud-config\n        } else {\n          doc.deleteIn(paths);\n        }\n      } catch (e) {}\n    },\n\n    mergeQGA(config) {\n      const { osType, userDataDoc } = config;\n      const _QGA_JSON = this.getMatchQGA(osType);\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      let packages = userDataJSON?.packages || [];\n      let runcmd = userDataJSON?.runcmd || [];\n\n      userDataDoc.setIn(['package_update'], true);\n\n      if (Array.isArray(packages)) {\n        if (!packages.includes('qemu-guest-agent')) {\n          packages.push('qemu-guest-agent');\n        }\n      } else {\n        packages = QGA_JSON.packages;\n      }\n\n      if (Array.isArray(runcmd)) {\n        let findIndex = -1;\n        const hasSameRuncmd = runcmd.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n\n        const hasSimilarRuncmd = runcmd.find( (S, index) => {\n          if (Array.isArray(S) && S.join('-') === this.getSimilarRuncmd(osType).join('-')) {\n            findIndex = index;\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (hasSimilarRuncmd) {\n          runcmd[findIndex] = _QGA_JSON.runcmd[0];\n        } else if (!hasSameRuncmd) {\n          runcmd.push(_QGA_JSON.runcmd[0]);\n        }\n      } else {\n        runcmd = _QGA_JSON.runcmd;\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []); // It needs to be set empty first, as it is possible that cloud-init comments are mounted on this node\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    deleteQGA(config) {\n      const { osType, userDataDoc, deletePackage = false } = config;\n\n      const userDataTemplateValue = this.$store.getters['harvester/byId'](CONFIG_MAP, this.userDataTemplateId)?.data?.cloudInit || '';\n\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      const packages = userDataJSON?.packages || [];\n      const runcmd = userDataJSON?.runcmd || [];\n\n      if (Array.isArray(packages) && deletePackage) {\n        const templateHasQGAPackage = this.convertToJson(userDataTemplateValue);\n\n        for (let i = 0; i < packages.length; i++) {\n          if (packages[i] === 'qemu-guest-agent') {\n            if (!(Array.isArray(templateHasQGAPackage?.packages) && templateHasQGAPackage.packages.includes('qemu-guest-agent'))) {\n              packages.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      if (Array.isArray(runcmd)) {\n        const _QGA_JSON = this.getMatchQGA(osType);\n\n        for (let i = 0; i < runcmd.length; i++) {\n          if (Array.isArray(runcmd[i]) && runcmd[i].join('-') === _QGA_JSON.runcmd[0].join('-')) {\n            runcmd.splice(i, 1);\n          }\n        }\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []);\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    generateSecretName(name) {\n      return name ? `${ name }-${ randomStr(5).toLowerCase() }` : undefined;\n    },\n\n    getOwnerReferencesFromVM(resource) {\n      const name = resource.metadata.name;\n      const kind = resource.kind;\n      const apiVersion = this.resourceType === HCI.VM ? 'kubevirt.io/v1' : 'harvesterhci.io/v1beta1';\n      const uid = resource?.metadata?.uid;\n\n      return [{\n        name,\n        kind,\n        uid,\n        apiVersion,\n      }];\n    },\n\n    async saveSecret(vm) {\n      if (!vm?.spec || !this.secretName || this.isWindows) {\n        return true;\n      }\n\n      let secret = this.getSecret(vm.spec);\n\n      // const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      if (!secret && this.isEdit && this.secretRef) {\n        // When editing the vm, if the userData and networkData are deleted, we also need to clean up the secret values\n        secret = this.secretRef;\n      }\n\n      if (!secret || this.needNewSecret) {\n        secret = await this.$store.dispatch('harvester/create', {\n          metadata: {\n            name:            this.secretName,\n            namespace:       this.value.metadata.namespace,\n            labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n            ownerReferences: this.getOwnerReferencesFromVM(vm)\n          },\n          type: SECRET\n        });\n      }\n\n      try {\n        if (secret) {\n          // If none of the data comes from the secret, then no data needs to be saved to the secret\n          if (!this.saveUserDataAsClearText || !this.saveNetworkDataAsClearText) {\n            secret.setData('userdata', this.userData || '');\n            secret.setData('networkdata', this.networkScript || '');\n            await secret.save();\n          }\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    async saveAccessCredentials(vm) {\n      if (!vm?.spec) {\n        return true;\n      }\n\n      // save\n      const toSave = [];\n\n      for (const row of this.accessCredentials) {\n        let secretRef = row.secretRef;\n\n        if (!secretRef || this.needNewSecret) {\n          secretRef = await this.$store.dispatch('harvester/create', {\n            metadata: {\n              name:            row.secretName,\n              namespace:       vm.metadata.namespace,\n              labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n              ownerReferences: this.getOwnerReferencesFromVM(vm)\n            },\n            type: SECRET\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          secretRef.setData(row.username, row.newPassword);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          for (const secretId of row.sshkeys) {\n            const keypair = (this.$store.getters['harvester/all'](HCI.SSH) || []).find((s) => s.id === secretId);\n\n            secretRef.setData(`${ keypair.metadata.namespace }-${ keypair.metadata.name }`, keypair.spec.publicKey);\n          }\n        }\n\n        toSave.push(secretRef);\n      }\n\n      try {\n        for (const resource of toSave) {\n          await resource.save();\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    getAccessCredentialsValidation() {\n      const errors = [];\n\n      for (let i = 0; i < this.accessCredentials.length; i++) {\n        const row = this.accessCredentials[i];\n        const source = row.source;\n\n        if (source === ACCESS_CREDENTIALS.RESET_PWD) {\n          if (!row.username) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.newPassword) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (row.newPassword && row.newPassword.length < 6) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.number.min', { key: fieldName, val: '6' });\n\n            errors.push(message);\n          }\n        } else {\n          if (!row.users || row.users.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.sshkeys || row.sshkeys.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.sshKeyValue');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n        }\n\n        if (errors.length > 0) {\n          break;\n        }\n      }\n\n      return errors;\n    },\n\n    getHasCreatedVolumes(spec) {\n      const out = [];\n\n      if (spec.template.spec.volumes) {\n        spec.template.spec.volumes.forEach((V) => {\n          if (V?.persistentVolumeClaim?.claimName) {\n            out.push(V.persistentVolumeClaim.claimName);\n          }\n        });\n      }\n\n      return out;\n    },\n\n    handlerUSBTablet(val) {\n      const hasExist = this.isInstallUSBTablet(this.spec);\n      const inputs = this.spec.template.spec.domain.devices?.inputs || [];\n\n      if (val && !hasExist) {\n        if (inputs.length > 0) {\n          inputs.push(USB_TABLET[0]);\n        } else {\n          Object.assign(this.spec.template.spec.domain.devices, {\n            inputs: [\n              USB_TABLET[0]\n            ]\n          });\n        }\n      } else if (!val) {\n        const index = inputs.findIndex((O) => isEqual(O, USB_TABLET[0]));\n\n        if (hasExist && inputs.length === 1) {\n          delete this.spec.template.spec.domain.devices['inputs'];\n        } else if (hasExist) {\n          inputs.splice(index, 1);\n          this.spec.template.spec.domain.devices['inputs'] = inputs;\n        }\n      }\n    },\n\n    setBootMethod(boot = { efi: false, secureBoot: false }) {\n      if (boot.efi && boot.secureBoot) {\n        set(this.spec.template.spec.domain, 'features.smm.enabled', true);\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', true);\n      } else if (boot.efi && !boot.secureBoot) {\n        // set(this.spec.template.spec.domain, 'features.smm.enabled', false);\n\n        try {\n          delete this.spec.template.spec.domain.features.smm['enabled'];\n          const noKeys = Object.keys(this.spec.template.spec.domain.features.smm).length === 0;\n\n          if (noKeys) {\n            delete this.spec.template.spec.domain.features['smm'];\n          }\n        } catch (e) {}\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', false);\n      } else {\n        delete this.spec.template.spec.domain['firmware'];\n        delete this.spec.template.spec.domain.features['smm'];\n      }\n    },\n\n    setCpuPinning(value) {\n      if (value) {\n        set(this.spec.template.spec.domain.cpu, 'dedicatedCpuPlacement', true);\n      } else {\n        delete this.spec.template.spec.domain.cpu['dedicatedCpuPlacement'];\n      }\n    },\n\n    setTPM(tpmEnabled) {\n      if (tpmEnabled) {\n        set(this.spec.template.spec.domain.devices, 'tpm', {});\n      } else {\n        delete this.spec.template.spec.domain.devices['tpm'];\n      }\n    },\n\n    deleteSSHFromUserData(ssh = []) {\n      const sshAuthorizedKeys = this.getSSHFromUserData(this.userScript);\n\n      ssh.map((id) => {\n        const index = sshAuthorizedKeys.findIndex((value) => value === this.getSSHValue(id));\n\n        if (index >= 0) {\n          sshAuthorizedKeys.splice(index, 1);\n        }\n      });\n\n      const userDataJson = this.convertToJson(this.userScript);\n\n      userDataJson.ssh_authorized_keys = sshAuthorizedKeys;\n\n      if (sshAuthorizedKeys.length === 0) {\n        delete userDataJson.ssh_authorized_keys;\n      }\n\n      if (isEmpty(userDataJson)) {\n        this['userScript'] = undefined;\n      } else {\n        this['userScript'] = jsyaml.dump(userDataJson);\n      }\n\n      this.refreshYamlEditor();\n    },\n\n    refreshYamlEditor() {\n      this.$nextTick(() => {\n        this.$refs.yamlEditor?.updateValue();\n      });\n    },\n\n    toggleAdvanced() {\n      this.showAdvanced = !this.showAdvanced;\n    },\n\n    updateAgent(value) {\n      if (!value) {\n        this.deletePackage = true;\n      }\n    },\n\n    updateDataTemplateId(type, id) {\n      if (type === 'user') {\n        const oldInstallAgent = this.installAgent;\n\n        this.userDataTemplateId = id;\n        this.$nextTick(() => {\n          if (oldInstallAgent) {\n            this.installAgent = oldInstallAgent;\n          }\n        });\n      }\n    },\n\n    updateReserved(value = {}) {\n      const { memory } = value;\n\n      this['reservedMemory'] = memory;\n    },\n\n    updateTerminationGracePeriodSeconds(value) {\n      this['terminationGracePeriodSeconds'] = value;\n    },\n  },\n\n  watch: {\n    diskRows: {\n      handler(neu, old) {\n        if (Array.isArray(neu)) {\n          const imageId = neu[0]?.image;\n          const image = this.images.find( (I) => imageId === I.id);\n          const osType = image?.imageOSType;\n\n          const oldImageId = old[0]?.image;\n\n          if (this.isCreate && oldImageId === imageId && imageId) {\n            this.osType = osType;\n          }\n        }\n      }\n    },\n\n    secretRef: {\n      handler(secret) {\n        if (secret && this.resourceType !== HCI.BACKUP) {\n          this.secretName = secret?.metadata.name;\n        }\n      },\n      immediate: true,\n      deep:      true\n    },\n\n    isWindows(val) {\n      if (val) {\n        this['sshKey'] = [];\n        this['userScript'] = undefined;\n        this['installAgent'] = false;\n      }\n    },\n\n    installUSBTablet(val) {\n      this.handlerUSBTablet(val);\n    },\n\n    efiEnabled(val) {\n      this.setBootMethod({ efi: val, secureBoot: this.secureBoot });\n    },\n\n    secureBoot(val) {\n      this.setBootMethod({ efi: this.efiEnabled, secureBoot: val });\n    },\n\n    cpuPinning(value) {\n      this.setCpuPinning(value);\n    },\n\n    tpmEnabled(val) {\n      this.setTPM(val);\n    },\n\n    installAgent: {\n      /**\n       * rules\n       * 1. The value in user Data is the first priority\n       * 2. After selecting the template, if checkbox is checked, only merge operation will be performed on user data,\n       *    if checkbox is unchecked, no value will be deleted in user data\n       */\n      handler(neu) {\n        if (this.deleteAgent) {\n          let out = this.getUserData({\n            installAgent: neu, osType: this.osType, deletePackage: this.deletePackage\n          });\n\n          if (neu) {\n            const hasCloudComment = this.hasCloudConfigComment(out);\n\n            if (!hasCloudComment) {\n              out = `#cloud-config\\n${ out }`;\n            }\n          }\n\n          this['userScript'] = out;\n          this.refreshYamlEditor();\n        }\n        this.deleteAgent = true;\n        this.deletePackage = false;\n      }\n    },\n\n    osType(neu) {\n      const out = this.getUserData({ installAgent: this.installAgent, osType: neu });\n\n      this['userScript'] = out;\n      this.refreshYamlEditor();\n    },\n\n    userScript(neu, old) {\n      const hasInstallAgent = this.hasInstallAgent(neu, this.osType, this.installAgent);\n\n      if (hasInstallAgent !== this.installAgent) {\n        this.deleteAgent = false;\n        this.installAgent = hasInstallAgent;\n      }\n    },\n\n    sshKey(neu, old) {\n      const _diff = difference(old, neu);\n\n      if (_diff.length && this.isEdit) {\n        this.deleteSSHFromUserData(_diff);\n      }\n    }\n  }\n};\n"],"names":["_createElementBlock","$props","arbitrary","_hoisted_1","value","_createBlock","_component_BadgeState","color","$data","stateBackground","label","stateDisplay","row","components","BadgeState","props","type","String","default","Object","required","col","Boolean","data","watch","handler","this","colorForState","replace","immediate","__exports__","render","QGA_JSON","package_update","packages","runcmd","QGA_MAP","USB_TABLET","bus","name","SSH_EXISTING_TYPE","EXISTING_ALL","EXISTING_ONLY_ANNOTATION","EXISTING_ONLY_CLOUD","methods","hasCloudConfigComment","userScript","userDataDoc","YAML","items","contents","exist","comment","includes","commentBefore","map","item","key","getSSHValue","id","inStore","$store","getters","sshs","HCI","SSH","find","O","spec","publicKey","undefined","getOsType","vm","metadata","labels","HCI_ANNOTATIONS","OS","getMatchQGA","osType","_QGA_JSON","clone","hasCustomQGA","forEach","match","getSimilarRuncmd","hasInstallAgent","oldValue","dataFormat","jsyaml","e","Error","S","Array","isArray","join","isInstallUSBTablet","inputs","template","domain","devices","isEqual","isEfiEnabled","firmware","bootloader","efi","isTpmEnabled","tpm","isSecureBoot","secureBoot","isCpuPinning","cpu","dedicatedCpuPlacement","getCloudInitNoCloud","secret","getSecret","userData","decodedData","userdata","networkData","networkdata","cloudInitNoCloud","volumes","V","saveUserDataAsClearText","saveNetworkDataAsClearText","secrets","SECRET","secretName","secretRef","networkDataSecretRef","s","getAccessCredentials","credentials","accessCredentials","annotations","JSON","parse","DYNAMIC_SSHKEYS_NAMES","c","source","userPassword","out","username","newPassword","users","sshkeys","keys","propagationMethod","qemuGuestAgent","getRootImageId","parseVolumeClaimTemplates","IMAGE_ID","getSSHFromAnnotation","ids","SSH_NAMES","convertToJson","script","getSSHFromUserData","ssh_authorized_keys","compareSSHValue","a","b","r","mergeAllSSHs","length","allSSHs","hasSSHResource","ssh","_userDataSSH","sshValue","push","LONGHORN_V2_DATA_ENGINE","MANAGEMENT_NETWORK","CD_ROM","HARD_DISK","mixins","impl","resourceType","fetch","hash","pvs","dispatch","PV","pvcs","PVC","storageClasses","STORAGE_CLASS","settings","SETTING","images","IMAGE","versions","VM_VERSION","templates","VM_TEMPLATE","networkAttachment","NETWORK_ATTACHMENT","vmis","VMI","vmims","VMIM","vms","VM","addons","ADD_ONS","longhornV2Engine","LONGHORN","SETTINGS","NODE","nodes","CLUSTER_NETWORK","clusterNetworks","VLAN_CONFIG","VOLUMES","longhornVolumes","res","allHash","hasPCISchema","PCI_DEVICE","hasSRIOVGPUSchema","SR_IOVGPU_DEVICE","enabledAddons","reduce","acc","addon","enabled","enabledPCI","PCI_DEVICE_CONTROLLER","enabledSriovgpu","NVIDIA_DRIVER_TOOLKIT_CONTROLLER","isClone","realMode","_CLONE","sshKey","maintenanceStrategies","maintenanceStrategy","runStrategies","runStrategy","installAgent","hasCreateVolumes","installUSBTablet","networkScript","imageId","diskRows","networkRows","machineType","showAdvanced","deleteAgent","memory","reservedMemory","efiEnabled","tpmEnabled","userDataTemplateId","immutableMode","_CREATE","_VIEW","terminationGracePeriodSeconds","cpuPinning","computed","filteredNamespaces","NAMESPACE","filter","namespace","isSystem","nodesIdOptions","networkNames","n","networkName","vmNetworks","selectedVMNetworks","uniq","clusterNetworkResource","N","isUnSchedulable","node","requireLabelKeys","isNetworkSchedule","clusterNetwork","requireLabelKey","nameDisplay","t","disabled","defaultStorageClass","defaultStorage","isDefault","storageClassSetting","storageClassValue","HCI_SETTING","DEFAULT_STORAGE_CLASS","customVolumeMode","volumeMode","customAccessMode","accessModes","isWindows","needNewSecret","isCreate","defaultTerminationSetting","setting","VM_TERMINATION_PERIOD","Number","affinityLabels","namespaceInputLabel","namespaceSelectionLabels","addLabel","topologyKeyPlaceholder","created","getInitConfig","init","config","existUserData","fromTemplate","BACKUP","status","volumeBackups","resources","limits","requests","VM_MAINTENANCE_MODE_STRATEGY","cores","VM_RESERVED_MEMORY","getDiskRows","getNetworkRows","getHasCreatedVolumes","secretBackups","secretNetworkData","secretUserData","base64Decode","getInitUserData","prototype","hasOwnProperty","call","running","refreshYamlEditor","volBackups","_volumes","_disks","disks","_volumeClaimTemplates","size","imageResource","I","isIsoImage","test","imageSuffix","imageSize","Math","max","virtualSize","isEncrypted","vBackup","volumeName","imageSizeGiB","ceil","randomStr","SOURCE_TYPE","accessMode","storageClassName","image","DISK","index","volume","realName","container","hotpluggable","dataSource","cdrom","disk","containerDisk","CONTAINER","persistentVolumeClaim","claimName","DVT","T","NEW","dataVolumeSpecPVC","storage","allPVCs","pvcResource","ATTACH_VOLUME","bootOrder","parseValue","parseSi","formatSize","formatSi","increment","addSuffix","maxExponent","minExponent","pvc","P","volumeStatus","relatedPV","VOLUME_ERROR","sortBy","networks","interfaces","network","sriov","bridge","isPod","pod","newCreateId","model","multus","parseVM","getUserData","parseOther","parseAccessCredentials","parseNetworkRows","parseDiskRows","machine","toString","diskNameLables","volumeClaimTemplates","R","prefixName","dataVolumeName","toLowerCase","_disk","parseDisk","_volume","parseVolume","_dataVolumeTemplate","parseVolumeClaimTemplate","generateSecretName","secretNamePrefix","D","cloudinitdisk","stringify","VM_NAME","isSingle","multiVMScheduler","VOLUME_CLAIM_TEMPLATE","NETWORK_IPS","networkIps","CREATOR","removeTrailingHyphen","str","endsWith","slice","namePrefix","VM_NAME_PREFIX","rule","weight","podAffinityTerm","topologyKey","HOSTNAME","labelSelector","matchLabels","affinity","podAntiAffinity","preferredDuringSchedulingIgnoredDuringExecution","networkRow","_network","parseNetwork","_interface","parseInterface","DYNAMIC_SSHKEYS_USERS","ACCESS_CREDENTIALS","RESET_PWD","INJECT_SSH","sshPublicKey","from","Set","getMaintenanceStrategyOptionLabel","opt","allSSHAuthorizedKeys","mergeSSHAuthorizedKeys","setIn","getIn","deleteIn","mergeQGA","deleteQGA","userDataYaml","console","error","updateSSHKey","neu","updateCpuMemory","getSSHListValue","arr","macAddress","updateUserData","updateNetworkData","yaml","sshAuthorizedKeys","get","toJSON","sshList","deleteYamlDocProp","doc","paths","isMatchProp","userDataYAML","userDataJSON","findIndex","hasSameRuncmd","hasSimilarRuncmd","deletePackage","userDataTemplateValue","CONFIG_MAP","cloudInit","templateHasQGAPackage","i","splice","getOwnerReferencesFromVM","resource","kind","apiVersion","uid","saveSecret","isEdit","CLOUD_INIT","ownerReferences","setData","save","Promise","reject","saveAccessCredentials","toSave","secretId","keypair","getAccessCredentialsValidation","errors","fieldName","message","val","handlerUSBTablet","hasExist","assign","setBootMethod","boot","set","features","smm","noKeys","setCpuPinning","setTPM","deleteSSHFromUserData","userDataJson","isEmpty","$nextTick","$refs","yamlEditor","updateValue","toggleAdvanced","updateAgent","updateDataTemplateId","oldInstallAgent","updateReserved","updateTerminationGracePeriodSeconds","old","imageOSType","oldImageId","deep","hasCloudComment","_diff","difference"],"sourceRoot":""}