{"version":3,"file":"harvester-1.0.6.umd.min.431.js","mappings":"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","sources":["webpack://harvester-1.0.6/./mixins/harvester-vm/impl.js","webpack://harvester-1.0.6/./mixins/harvester-vm/index.js"],"sourcesContent":["import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport { clone } from '@shell/utils/object';\nimport { SECRET } from '@shell/config/types';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport { OS } from './index';\n\nexport const QGA_JSON = {\n  package_update: true,\n  packages:       ['qemu-guest-agent'],\n  runcmd:         [\n    [\n      'systemctl',\n      'enable',\n      '--now',\n      'qemu-guest-agent.service'\n    ]\n  ]\n};\n\nexport const QGA_MAP = { default: 'qemu-guest-agent.service' };\n\nexport const USB_TABLET = [{\n  bus:  'usb',\n  name: 'tablet',\n  type: 'tablet'\n}];\n\nexport const SSH_EXISTING_TYPE = {\n  EXISTING_ALL:             'EXISTING_ALL',\n  EXISTING_ONLY_ANNOTATION: 'EXISTING_ANNOTATION',\n  EXISTING_ONLY_CLOUD:      'EXISTING_CLOUD',\n};\n\nexport default {\n  methods: {\n    hasCloudConfigComment(userScript) {\n      // Check that userData contains: #cloud-config\n      const userDataDoc = userScript ? YAML.parseDocument(userScript) : YAML.parseDocument({});\n      const items = userDataDoc?.contents?.items || [];\n\n      let exist = false;\n\n      if (userDataDoc?.comment === 'cloud-config' || userDataDoc?.comment?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      if (userDataDoc?.commentBefore === 'cloud-config' || userDataDoc?.commentBefore?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      items.map((item) => {\n        const key = item.key;\n\n        if (key?.commentBefore === 'cloud-config' || key?.commentBefore?.includes('cloud-config\\n')) {\n          exist = true;\n        }\n      });\n\n      return exist;\n    },\n\n    getSSHValue(id) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const sshs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      return sshs.find( (O) => O.id === id)?.spec?.publicKey || undefined;\n    },\n\n    getOsType(vm) {\n      return vm.metadata?.labels?.[HCI_ANNOTATIONS.OS];\n    },\n\n    getMatchQGA(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n      let hasCustomQGA = false;\n\n      OS.forEach((O) => {\n        if (O.match) {\n          hasCustomQGA = O.match.find((type) => type === osType);\n        }\n      });\n\n      if (hasCustomQGA) {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP[osType];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      }\n\n      return _QGA_JSON;\n    },\n\n    getSimilarRuncmd(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n\n      if (osType === 'openSUSE') {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['suse'];\n      }\n\n      return _QGA_JSON.runcmd[0];\n    },\n\n    hasInstallAgent(userScript, osType, oldValue) {\n      let dataFormat = {};\n      const _QGA_JSON = this.getMatchQGA(osType);\n\n      try {\n        dataFormat = jsyaml.load(userScript) || {};\n      } catch (e) {\n        new Error('Function(hasInstallAgent) error');\n\n        return oldValue;\n      }\n\n      return dataFormat?.packages?.includes('qemu-guest-agent') && !!dataFormat?.runcmd?.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n    },\n\n    isInstallUSBTablet(spec) {\n      const inputs = spec?.template?.spec?.domain?.devices?.inputs;\n\n      if (Array.isArray(inputs)) {\n        return !!inputs.find((O) => {\n          return isEqual(O, USB_TABLET[0]);\n        });\n      } else {\n        return false;\n      }\n    },\n\n    isEfiEnabled(spec) {\n      return !!(spec?.template?.spec?.domain?.firmware?.bootloader?.efi);\n    },\n\n    isTpmEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm ;\n    },\n\n    isSecureBoot(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.secureBoot;\n    },\n\n    isCpuPinning(spec) {\n      return !!spec?.template?.spec?.domain?.cpu?.dedicatedCpuPlacement;\n    },\n\n    getCloudInitNoCloud(spec) {\n      const secret = this.getSecret(spec);\n      let userData = secret?.decodedData?.userdata;\n      let networkData = secret?.decodedData?.networkdata;\n\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n\n      // If the value is not found inside the secret, the data may be written directly in the yaml\n      if (cloudInitNoCloud?.userData) {\n        userData = cloudInitNoCloud.userData;\n        this.saveUserDataAsClearText = true;\n      }\n\n      if (cloudInitNoCloud?.networkData) {\n        networkData = cloudInitNoCloud.networkData;\n        this.saveNetworkDataAsClearText = true;\n      }\n\n      return { userData, networkData };\n    },\n\n    getSecret(spec) {\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n\n      const secretName = cloudInitNoCloud?.secretRef?.name || cloudInitNoCloud?.networkDataSecretRef?.name;\n\n      const secret = secrets.find((s) => s.metadata.name === secretName);\n\n      return secret;\n    },\n\n    getAccessCredentials(spec) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n      const credentials = spec?.template?.spec?.accessCredentials || [];\n      const annotations = JSON.parse(spec.template.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] || '[]');\n\n      return credentials.map((c) => {\n        const source = !!c.userPassword ? 'userPassword' : 'sshPublicKey';\n        const secretName = c[source]?.source?.secret?.secretName;\n        const secretRef = secrets.find((s) => s.metadata.name === secretName);\n        const out = {\n          source, username: '', newPassword: '', users: [], sshkeys: [], secretName, secretRef\n        };\n\n        if (!secretRef) {\n          out.secretRef = undefined;\n        } else if (source === 'userPassword') {\n          const username = Object.keys(secretRef?.data)[0];\n          const newPassword = secretRef.decodedData[username];\n\n          out.username = username;\n          out.newPassword = newPassword;\n        } else {\n          const users = c[source].propagationMethod.qemuGuestAgent.users;\n          const sshkeys = annotations?.[secretName];\n\n          out.users = users;\n          out.sshkeys = sshkeys;\n        }\n\n        return out;\n      });\n    },\n\n    getRootImageId(vm) {\n      const volumes = parseVolumeClaimTemplates(vm);\n\n      return volumes?.[0]?.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] || '';\n    },\n\n    getSSHFromAnnotation(spec) {\n      const ids = spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.SSH_NAMES] || '[]';\n\n      return JSON.parse(ids);\n    },\n\n    convertToJson(script = '') {\n      let out = {};\n\n      try {\n        out = jsyaml.load(script);\n      } catch (e) {\n        new Error('Function(convertToJson) error');\n      }\n\n      return out;\n    },\n\n    getSSHFromUserData(userData) {\n      return this.convertToJson(userData)?.ssh_authorized_keys || [];\n    },\n\n    compareSSHValue(a = '', b = '') {\n      const r = /(\\r\\n\\t|\\n|\\r\\t)|(\\s*)/gm;\n\n      return a.replace(r, '') === b.replace(r, '');\n    },\n\n    mergeAllSSHs(spec) {\n      const keys = this.getSSHFromAnnotation(spec);\n      const { userScript: userData } = this.getCloudInitNoCloud(spec);\n\n      if (!keys?.length < 0 && !userData) {\n        return [];\n      }\n\n      let out = [];\n\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const allSSHs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      out = (keys || []).map((id) => {\n        const hasSSHResource = allSSHs.find((ssh) => ssh.id === id);\n\n        if (hasSSHResource) {\n          return {\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          };\n        } else {\n          return {\n            id,\n            data: id,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_ANNOTATION\n          };\n        }\n      });\n\n      const _userDataSSH = this.getSSHFromUserData(userData);\n\n      _userDataSSH.map( (sshValue) => {\n        const hasSSHResource = allSSHs.find((ssh) => this.compareSSHValue(sshValue, ssh.spec?.publicKey));\n\n        if (hasSSHResource && !out.find((O) => O.id === hasSSHResource.id)) {\n          out.push({\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          });\n        } else if (!hasSSHResource) {\n          out.push({\n            id:   'Unknown',\n            data: sshValue,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_CLOUD\n          });\n        }\n      });\n\n      return out;\n    },\n  },\n};\n","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport difference from 'lodash/difference';\n\nimport { sortBy } from '@shell/utils/sort';\nimport { set } from '@shell/utils/object';\n\nimport { allHash } from '@shell/utils/promise';\nimport { randomStr } from '@shell/utils/string';\nimport { base64Decode } from '@shell/utils/crypto';\nimport { formatSi, parseSi } from '@shell/utils/units';\nimport { _CLONE, _CREATE, _VIEW } from '@shell/config/query-params';\nimport {\n  PV, PVC, STORAGE_CLASS, NODE, SECRET, CONFIG_MAP, NETWORK_ATTACHMENT, NAMESPACE, LONGHORN\n} from '@shell/config/types';\nimport { HOSTNAME } from '@shell/config/labels-annotations';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { uniq } from '@shell/utils/array';\nimport {\n  ADD_ONS, SOURCE_TYPE, ACCESS_CREDENTIALS, maintenanceStrategies, runStrategies\n} from '../../config/harvester-map';\nimport { HCI_SETTING } from '../../config/settings';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport impl, { QGA_JSON, USB_TABLET } from './impl';\n\nconst LONGHORN_V2_DATA_ENGINE = 'longhorn-system/v2-data-engine';\n\nexport const MANAGEMENT_NETWORK = 'management Network';\n\nexport const OS = [{\n  label: 'Windows',\n  value: 'windows'\n}, {\n  label: 'Linux',\n  value: 'linux'\n}, {\n  label: 'SUSE Linux Enterprise',\n  value: 'SLEs'\n}, {\n  label: 'Debian',\n  value: 'debian'\n}, {\n  label: 'Fedora',\n  value: 'fedora'\n}, {\n  label: 'Gentoo',\n  value: 'gentoo'\n}, {\n  label: 'Oracle',\n  value: 'oracle'\n}, {\n  label: 'Red Hat',\n  match: ['redhat', 'rhel'],\n  value: 'redhat'\n}, {\n  label: 'openSUSE',\n  value: 'openSUSE',\n}, {\n  label: 'Ubuntu',\n  value: 'ubuntu'\n}, {\n  label: 'Other Linux',\n  match: ['centos'],\n  value: 'otherLinux'\n}];\n\nexport const CD_ROM = 'cd-rom';\nexport const HARD_DISK = 'disk';\n\nexport default {\n  mixins: [impl],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    resourceType: {\n      type:    String,\n      default: ''\n    }\n  },\n\n  async fetch() {\n    const inStore = this.$store.getters['currentProduct'].inStore;\n    const hash = {\n      pvs:               this.$store.dispatch(`${ inStore }/findAll`, { type: PV }),\n      pvcs:              this.$store.dispatch(`${ inStore }/findAll`, { type: PVC }),\n      storageClasses:    this.$store.dispatch(`${ inStore }/findAll`, { type: STORAGE_CLASS }),\n      sshs:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SSH }),\n      settings:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SETTING }),\n      images:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.IMAGE }),\n      versions:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_VERSION }),\n      templates:         this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_TEMPLATE }),\n      networkAttachment: this.$store.dispatch(`${ inStore }/findAll`, { type: NETWORK_ATTACHMENT }),\n      vmis:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMI }),\n      vmims:             this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMIM }),\n      vms:               this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM }),\n      secrets:           this.$store.dispatch(`${ inStore }/findAll`, { type: SECRET }),\n      addons:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.ADD_ONS }),\n      longhornV2Engine:  this.$store.dispatch(`${ inStore }/find`, { type: LONGHORN.SETTINGS, id: LONGHORN_V2_DATA_ENGINE }),\n    };\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](NODE)) {\n      hash.nodes = this.$store.dispatch(`${ inStore }/findAll`, { type: NODE });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.CLUSTER_NETWORK)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.CLUSTER_NETWORK });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.VLAN_CONFIG)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VLAN_CONFIG });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](LONGHORN.VOLUMES)) {\n      hash.longhornVolumes = this.$store.dispatch(`${ inStore }/findAll`, { type: LONGHORN.VOLUMES });\n    }\n\n    const res = await allHash(hash);\n\n    const hasPCISchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.PCI_DEVICE);\n    const hasSRIOVGPUSchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.SR_IOVGPU_DEVICE);\n\n    const enabledAddons = res.addons.reduce((acc, addon) => ({ ...acc, [addon.name]: addon.spec?.enabled }), {});\n\n    this.enabledPCI = hasPCISchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER];\n    this.enabledSriovgpu = hasSRIOVGPUSchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER] && enabledAddons[ADD_ONS.NVIDIA_DRIVER_TOOLKIT_CONTROLLER];\n  },\n\n  data() {\n    const isClone = this.realMode === _CLONE;\n\n    return {\n      OS,\n      isClone,\n      spec:                          null,\n      osType:                        'linux',\n      sshKey:                        [],\n      maintenanceStrategies,\n      maintenanceStrategy:           'Migrate',\n      runStrategies,\n      runStrategy:                   'RerunOnFailure',\n      installAgent:                  true,\n      hasCreateVolumes:              [],\n      installUSBTablet:              true,\n      networkScript:                 '',\n      userScript:                    '',\n      imageId:                       '',\n      diskRows:                      [],\n      networkRows:                   [],\n      machineType:                   '',\n      secretName:                    '',\n      secretRef:                     null,\n      showAdvanced:                  false,\n      deleteAgent:                   true,\n      memory:                        null,\n      cpu:                           '',\n      reservedMemory:                null,\n      accessCredentials:             [],\n      efiEnabled:                    false,\n      tpmEnabled:                    false,\n      secureBoot:                    false,\n      userDataTemplateId:            '',\n      saveUserDataAsClearText:       false,\n      saveNetworkDataAsClearText:    false,\n      enabledPCI:                    false,\n      enabledSriovgpu:               false,\n      immutableMode:                 this.realMode === _CREATE ? _CREATE : _VIEW,\n      terminationGracePeriodSeconds: '',\n      cpuPinning:                    false,\n    };\n  },\n\n  computed: {\n    inStore() {\n      return this.$store.getters['currentProduct'].inStore;\n    },\n\n    images() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.IMAGE);\n    },\n\n    versions() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_VERSION);\n    },\n\n    templates() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_TEMPLATE);\n    },\n\n    pvcs() {\n      return this.$store.getters[`${ this.inStore }/all`](PVC);\n    },\n\n    secrets() {\n      return this.$store.getters[`${ this.inStore }/all`](SECRET);\n    },\n\n    filteredNamespaces() {\n      return this.$store.getters['harvester/all'](NAMESPACE).filter((namespace) => !namespace.isSystem);\n    },\n\n    nodes() {\n      return this.$store.getters['harvester/all'](NODE);\n    },\n\n    nodesIdOptions() {\n      const nodes = this.$store.getters[`${ this.inStore }/all`](NODE);\n\n      const networkNames = this.networkRows.map((n) => n.networkName);\n      const vmNetworks = this.$store.getters[`${ this.inStore }/all`](NETWORK_ATTACHMENT);\n      const selectedVMNetworks = networkNames.map((name) => vmNetworks.find((n) => n.id === name)).filter((n) => n?.id);\n      const clusterNetworks = uniq(selectedVMNetworks.map((n) => n.clusterNetworkResource?.id));\n\n      return nodes.filter((N) => !N.isUnSchedulable && N.isEtcd !== 'true').map((node) => {\n        const requireLabelKeys = [];\n        let isNetworkSchedule = true;\n\n        if (clusterNetworks.length > 0) {\n          clusterNetworks.map((clusterNetwork) => {\n            requireLabelKeys.push(`network.harvesterhci.io/${ clusterNetwork }`);\n          });\n        }\n\n        requireLabelKeys.map((requireLabelKey) => {\n          if (node.metadata?.labels?.[requireLabelKey] !== 'true') {\n            isNetworkSchedule = false;\n          }\n        });\n\n        return {\n          label:    isNetworkSchedule ? node.nameDisplay : `${ node.nameDisplay } (${ this.t('harvester.virtualMachine.scheduling.networkNotSupport') })`,\n          value:    node.id,\n          disabled: !isNetworkSchedule,\n        };\n      });\n    },\n\n    defaultStorageClass() {\n      const defaultStorage = this.$store.getters[`${ this.inStore }/all`](STORAGE_CLASS).find( (O) => O.isDefault);\n\n      return defaultStorage;\n    },\n\n    storageClassSetting() {\n      try {\n        const storageClassValue = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.DEFAULT_STORAGE_CLASS)?.value;\n\n        return JSON.parse(storageClassValue);\n      } catch (e) {\n        return {};\n      }\n    },\n\n    customVolumeMode() {\n      return this.storageClassSetting.volumeMode || 'Block';\n    },\n\n    customAccessMode() {\n      return this.storageClassSetting.accessModes || 'ReadWriteMany';\n    },\n\n    isWindows() {\n      return this.osType === 'windows';\n    },\n\n    needNewSecret() {\n      // When creating a template it is always necessary to create a new secret.\n      return this.resourceType === HCI.VM_VERSION || this.isCreate;\n    },\n\n    defaultTerminationSetting() {\n      const setting = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.VM_TERMINATION_PERIOD) || {};\n\n      return Number(setting?.value || setting?.default);\n    },\n\n    affinityLabels() {\n      return {\n        namespaceInputLabel:      this.t('harvester.virtualMachine.affinity.namespaces.label'),\n        namespaceSelectionLabels: [\n          this.t('harvester.virtualMachine.affinity.thisPodNamespace'),\n          this.t('workload.scheduling.affinity.allNamespaces'),\n          this.t('harvester.virtualMachine.affinity.matchExpressions.inNamespaces')\n        ],\n        addLabel:               this.t('harvester.virtualMachine.affinity.addLabel'),\n        topologyKeyPlaceholder: this.t('harvester.virtualMachine.affinity.topologyKey.placeholder')\n      };\n    },\n  },\n\n  async created() {\n    await this.$store.dispatch(`${ this.inStore }/findAll`, { type: SECRET });\n    this.getInitConfig({ value: this.value, init: this.isCreate });\n  },\n\n  methods: {\n    getInitConfig(config) {\n      const {\n        value, existUserData, fromTemplate = false, init = false\n      } = config;\n\n      const vm = this.resourceType === HCI.VM ? value : this.resourceType === HCI.BACKUP ? this.value.status?.source : value.spec.vm;\n      const volumeBackups = this.resourceType === HCI.BACKUP ? this.value.status?.volumeBackups : null;\n\n      const spec = vm?.spec;\n\n      if (!spec) {\n        return;\n      }\n      const resources = spec.template.spec.domain.resources;\n\n      // If the user is created via yaml, there may be no \"resources.limits\": kubectl apply -f https://kubevirt.io/labs/manifests/vm.yaml\n      if (!resources?.limits || (resources?.limits && !resources?.limits?.memory && resources?.limits?.memory !== null)) {\n        spec.template.spec.domain.resources = {\n          ...spec.template.spec.domain.resources,\n          limits: {\n            ...spec.template.spec.domain.resources.limits,\n            memory: spec.template.spec.domain.resources.requests.memory\n          }\n        };\n      }\n\n      if (!vm.metadata.labels) {\n        vm.metadata.labels = {};\n      }\n      const maintenanceStrategy = vm.metadata.labels?.[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] || 'Migrate';\n\n      const runStrategy = spec.runStrategy || 'RerunOnFailure';\n      const machineType = value.machineType;\n      const cpu = spec.template.spec.domain?.cpu?.cores;\n      const memory = spec.template.spec.domain.resources.limits.memory;\n      const reservedMemory = vm.metadata?.annotations?.[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      const terminationGracePeriodSeconds = spec.template.spec?.terminationGracePeriodSeconds || this.defaultTerminationSetting;\n\n      const sshKey = this.getSSHFromAnnotation(spec) || [];\n\n      const imageId = this.getRootImageId(vm) || '';\n      const diskRows = this.getDiskRows(vm, volumeBackups);\n\n      const networkRows = this.getNetworkRows(vm, { fromTemplate, init });\n      const hasCreateVolumes = this.getHasCreatedVolumes(spec) || [];\n\n      let { userData = undefined, networkData = undefined } = this.getCloudInitNoCloud(spec);\n\n      if (this.resourceType === HCI.BACKUP) {\n        const secretBackups = this.value.status?.secretBackups;\n\n        if (secretBackups) {\n          const secretNetworkData = secretBackups[0]?.data?.networkdata || '';\n          const secretUserData = secretBackups[0]?.data?.userdata || '';\n\n          userData = base64Decode(secretUserData);\n          networkData = base64Decode(secretNetworkData);\n        }\n      }\n      const osType = this.getOsType(vm) || 'linux';\n\n      userData = this.isCreate && !existUserData && !this.isClone ? this.getInitUserData({ osType }) : userData;\n\n      const installUSBTablet = this.isInstallUSBTablet(spec);\n      const installAgent = this.hasInstallAgent(userData, osType, true);\n      const efiEnabled = this.isEfiEnabled(spec);\n      const tpmEnabled = this.isTpmEnabled(spec);\n      const secureBoot = this.isSecureBoot(spec);\n      const cpuPinning = this.isCpuPinning(spec);\n\n      const secretRef = this.getSecret(spec);\n      const accessCredentials = this.getAccessCredentials(spec);\n\n      if (Object.prototype.hasOwnProperty.call(spec, 'running')) {\n        delete spec.running;\n        spec.runStrategy = 'RerunOnFailure';\n      }\n\n      this['spec'] = spec;\n      this['maintenanceStrategy'] = maintenanceStrategy;\n      this['runStrategy'] = runStrategy;\n      this['secretRef'] = secretRef;\n      this['accessCredentials'] = accessCredentials;\n      this['userScript'] = userData;\n      this['networkScript'] = networkData;\n\n      this['sshKey'] = sshKey;\n      this['osType'] = osType;\n      this['installAgent'] = installAgent;\n\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n      this['reservedMemory'] = reservedMemory;\n      this['machineType'] = machineType;\n      this['terminationGracePeriodSeconds'] = terminationGracePeriodSeconds;\n\n      this['installUSBTablet'] = installUSBTablet;\n      this['efiEnabled'] = efiEnabled;\n      this['tpmEnabled'] = tpmEnabled;\n      this['secureBoot'] = secureBoot;\n      this['cpuPinning'] = cpuPinning;\n\n      this['hasCreateVolumes'] = hasCreateVolumes;\n      this['networkRows'] = networkRows;\n      this['imageId'] = imageId;\n\n      this['diskRows'] = diskRows;\n\n      this.refreshYamlEditor();\n    },\n\n    getDiskRows(vm, volBackups) {\n      const namespace = vm.metadata.namespace;\n      const _volumes = vm.spec.template.spec.volumes || [];\n      const _disks = vm.spec.template.spec.domain.devices.disks || [];\n      const _volumeClaimTemplates = parseVolumeClaimTemplates(vm);\n\n      let out = [];\n\n      if (_disks.length === 0) {\n        let bus = 'virtio';\n        let type = HARD_DISK;\n        let size = '10Gi';\n\n        const imageResource = this.images.find( (I) => this.imageId === I.id);\n\n        const isIsoImage = /iso$/i.test(imageResource?.imageSuffix);\n        const imageSize = Math.max(imageResource?.status?.size, imageResource?.status?.virtualSize);\n        const isEncrypted = imageResource?.isEncrypted || false;\n        const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === 'disk-0') || null ;\n\n        if (isIsoImage) {\n          bus = 'sata';\n          type = CD_ROM;\n        }\n\n        if (imageSize) {\n          let imageSizeGiB = Math.ceil(imageSize / 1024 / 1024 / 1024);\n\n          if (!isIsoImage) {\n            imageSizeGiB = Math.max(imageSizeGiB, 10);\n          }\n          size = `${ imageSizeGiB }Gi`;\n        }\n\n        out.push({\n          id:               randomStr(5),\n          source:           SOURCE_TYPE.IMAGE,\n          name:             'disk-0',\n          accessMode:       'ReadWriteMany', // root disk only support LHv1 volume, should be RWX\n          bus,\n          volumeName:       '',\n          size,\n          type,\n          storageClassName: '',\n          image:            this.imageId,\n          volumeMode:       'Block',\n          isEncrypted,\n          volumeBackups,\n        });\n      } else {\n        out = _disks.map( (DISK, index) => {\n          const volume = _volumes.find( (V) => V.name === DISK.name );\n\n          let size = '';\n          let image = '';\n          let source = '';\n          let realName = '';\n          let container = '';\n          let volumeName = '';\n          let accessMode = '';\n          let volumeMode = '';\n          let storageClassName = '';\n          let hotpluggable = false;\n          let dataSource = null;\n\n          const type = DISK?.cdrom ? CD_ROM : DISK?.disk ? HARD_DISK : '';\n\n          if (volume?.containerDisk) { // SOURCE_TYPE.CONTAINER\n            source = SOURCE_TYPE.CONTAINER;\n            container = volume.containerDisk.image;\n          }\n\n          if (volume.persistentVolumeClaim && volume.persistentVolumeClaim?.claimName) {\n            volumeName = volume.persistentVolumeClaim.claimName;\n            const DVT = _volumeClaimTemplates.find( (T) => T.metadata.name === volumeName);\n\n            realName = volumeName;\n            // If the DVT can be found, it cannot be an existing volume\n            if (DVT) {\n              // has annotation (HCI_ANNOTATIONS.IMAGE_ID) => SOURCE_TYPE.IMAGE\n              if (DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] !== undefined) {\n                image = DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID];\n                source = SOURCE_TYPE.IMAGE;\n              } else {\n                source = SOURCE_TYPE.NEW;\n              }\n\n              const dataVolumeSpecPVC = DVT?.spec || {};\n\n              volumeMode = dataVolumeSpecPVC?.volumeMode;\n              accessMode = dataVolumeSpecPVC?.accessModes?.[0];\n              size = dataVolumeSpecPVC?.resources?.requests?.storage || '10Gi';\n              storageClassName = dataVolumeSpecPVC?.storageClassName;\n              dataSource = dataVolumeSpecPVC?.dataSource;\n            } else {\n              // SOURCE_TYPE.ATTACH_VOLUME\n              // Compatible with VMS that have been created before, Because they're not saved in the annotation\n              const allPVCs = this.$store.getters['harvester/all'](PVC);\n              const pvcResource = allPVCs.find( (O) => O.id === `${ namespace }/${ volume?.persistentVolumeClaim?.claimName }`);\n\n              source = SOURCE_TYPE.ATTACH_VOLUME;\n              accessMode = pvcResource?.spec?.accessModes?.[0] || 'ReadWriteMany';\n              size = pvcResource?.spec?.resources?.requests?.storage || '10Gi';\n              storageClassName = pvcResource?.spec?.storageClassName;\n              volumeMode = pvcResource?.spec?.volumeMode || 'Block';\n              volumeName = pvcResource?.metadata?.name || '';\n            }\n\n            hotpluggable = volume.persistentVolumeClaim.hotpluggable || false;\n          }\n\n          const bus = DISK?.disk?.bus || DISK?.cdrom?.bus;\n\n          const bootOrder = DISK?.bootOrder ? DISK?.bootOrder : index;\n\n          const parseValue = parseSi(size);\n\n          const formatSize = formatSi(parseValue, {\n            increment:   1024,\n            addSuffix:   false,\n            maxExponent: 3,\n            minExponent: 3,\n          });\n\n          const pvc = this.pvcs.find((P) => P.id === `${ this.value.metadata.namespace }/${ volumeName }`);\n\n          const volumeStatus = pvc?.relatedPV?.metadata?.annotations?.[HCI_ANNOTATIONS.VOLUME_ERROR];\n\n          const isEncrypted = pvc?.isEncrypted || false;\n          const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === DISK.name) || null;\n\n          return {\n            id:         randomStr(5),\n            bootOrder,\n            source,\n            name:       DISK.name,\n            realName,\n            bus,\n            volumeName,\n            container,\n            accessMode,\n            size:       `${ formatSize }Gi`,\n            volumeMode: volumeMode || this.customVolumeMode,\n            image,\n            type,\n            storageClassName,\n            hotpluggable,\n            volumeStatus,\n            dataSource,\n            namespace,\n            isEncrypted,\n            volumeBackups,\n          };\n        });\n      }\n\n      out = sortBy(out, 'bootOrder');\n\n      return out.filter( (O) => O.name !== 'cloudinitdisk');\n    },\n\n    getNetworkRows(vm, config) {\n      const { fromTemplate = false, init = false } = config;\n\n      const networks = vm.spec.template.spec.networks || [];\n      const interfaces = vm.spec.template.spec.domain.devices.interfaces || [];\n\n      const out = interfaces.map( (I, index) => {\n        const network = networks.find( (N) => I.name === N.name);\n\n        const type = I.sriov ? 'sriov' : I.bridge ? 'bridge' : 'masquerade';\n\n        const isPod = !!network.pod;\n\n        return {\n          ...I,\n          index,\n          type,\n          isPod,\n          newCreateId: (fromTemplate || init) ? randomStr(10) : false,\n          model:       I.model,\n          networkName: isPod ? MANAGEMENT_NETWORK : network?.multus?.networkName,\n        };\n      });\n\n      return out;\n    },\n\n    parseVM() {\n      this.userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      this.parseOther();\n      this.parseAccessCredentials();\n      this.parseNetworkRows(this.networkRows);\n      this.parseDiskRows(this.diskRows);\n    },\n\n    parseOther() {\n      if (!this.spec.template.spec.domain.machine) {\n        this.spec.template.spec.domain['machine'] = { type: this.machineType };\n      } else {\n        this.spec.template.spec.domain.machine['type'] = this.machineType;\n      }\n\n      this.spec.template.spec.domain.cpu.cores = this.cpu;\n      this.spec.template.spec.domain.resources.limits.cpu = this.cpu ? this.cpu.toString() : this.cpu;\n      this.spec.template.spec.domain.resources.limits.memory = this.memory;\n      this.spec.template.spec.terminationGracePeriodSeconds = this.terminationGracePeriodSeconds;\n\n      // parse reserved memory\n      const vm = this.resourceType === HCI.VM ? this.value : this.value.spec.vm;\n\n      if (!this.reservedMemory) {\n        delete vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      } else {\n        vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY] = this.reservedMemory;\n      }\n\n      if (this.maintenanceStrategy === 'Migrate') {\n        delete vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY];\n      } else {\n        vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] = this.maintenanceStrategy;\n      }\n    },\n\n    parseDiskRows(disk) {\n      const disks = [];\n      const volumes = [];\n      const diskNameLables = [];\n      const volumeClaimTemplates = [];\n\n      disk.forEach( (R, index) => {\n        const prefixName = this.value.metadata?.name || '';\n\n        let dataVolumeName = '';\n\n        if (R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n          dataVolumeName = R.volumeName;\n        } else if (this.isClone || !this.hasCreateVolumes.includes(R.realName)) {\n          dataVolumeName = `${ prefixName }-${ R.name }-${ randomStr(5).toLowerCase() }`;\n        } else {\n          dataVolumeName = R.realName;\n        }\n\n        const _disk = this.parseDisk(R, index);\n        const _volume = this.parseVolume(R, dataVolumeName);\n        const _dataVolumeTemplate = this.parseVolumeClaimTemplate(R, dataVolumeName);\n\n        disks.push(_disk);\n        volumes.push(_volume);\n        diskNameLables.push(dataVolumeName);\n\n        if (R.source !== SOURCE_TYPE.CONTAINER) {\n          volumeClaimTemplates.push(_dataVolumeTemplate);\n        }\n      });\n\n      if (!this.secretName || this.needNewSecret) {\n        this.secretName = this.generateSecretName(this.secretNamePrefix);\n      }\n\n      if (!disks.find( (D) => D.name === 'cloudinitdisk') && (this.userData || this.networkData)) {\n        if (!this.isWindows) {\n          disks.push({\n            name: 'cloudinitdisk',\n            disk: { bus: 'virtio' }\n          });\n\n          const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n\n          const cloudinitdisk = {\n            name:             'cloudinitdisk',\n            cloudInitNoCloud: {}\n          };\n\n          if (this.saveUserDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.userData = userData;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.secretRef = { name: this.secretName };\n          }\n\n          if (this.saveNetworkDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.networkData = this.networkScript;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.networkDataSecretRef = { name: this.secretName };\n          }\n\n          volumes.push(cloudinitdisk);\n        }\n      }\n\n      let spec = {\n        ...this.spec,\n        runStrategy: this.runStrategy,\n        template:    {\n          ...this.spec.template,\n          metadata: {\n            ...this.spec?.template?.metadata,\n            annotations: {\n              ...this.spec?.template?.metadata?.annotations,\n              [HCI_ANNOTATIONS.SSH_NAMES]: JSON.stringify(this.sshKey)\n            },\n            labels: {\n              ...this.spec?.template?.metadata?.labels,\n              [HCI_ANNOTATIONS.VM_NAME]: this.value?.metadata?.name,\n            }\n          },\n          spec: {\n            ...this.spec.template?.spec,\n            domain: {\n              ...this.spec.template?.spec?.domain,\n              devices: {\n                ...this.spec.template?.spec?.domain?.devices,\n                disks,\n              },\n            },\n            volumes,\n          }\n        }\n      };\n\n      if (volumes.length === 0) {\n        delete spec.template.spec.volumes;\n      }\n\n      if (this.resourceType === HCI.VM) {\n        if (!this.isSingle) {\n          spec = this.multiVMScheduler(spec);\n        }\n\n        this.value.metadata['annotations'] = {\n          ...this.value.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n          [HCI_ANNOTATIONS.NETWORK_IPS]:           JSON.stringify(this.value.networkIps)\n        };\n\n        this.value.metadata['labels'] = {\n          ...this.value.metadata.labels,\n          [HCI_ANNOTATIONS.CREATOR]: 'harvester',\n          [HCI_ANNOTATIONS.OS]:      this.osType\n        };\n\n        this.value['spec'] = spec;\n        this['spec'] = spec;\n      } else if (this.resourceType === HCI.VM_VERSION) {\n        this.value.spec.vm['spec'] = spec;\n        this.value.spec.vm.metadata['annotations'] = {\n          ...this.value.spec.vm.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n        };\n        this.value.spec.vm.metadata['labels'] = {\n          ...this.value.spec.vm.metadata.labels,\n          [HCI_ANNOTATIONS.OS]: this.osType\n        };\n        this['spec'] = spec;\n      }\n    },\n\n    removeTrailingHyphen(str) {\n      while (str.endsWith('-')) {\n        str = str.slice(0, -1);\n      }\n\n      return str;\n    },\n\n    multiVMScheduler(spec) {\n      const namePrefix = this.removeTrailingHyphen(this.namePrefix);\n\n      spec.template.metadata.labels[HCI_ANNOTATIONS.VM_NAME_PREFIX] = namePrefix;\n\n      const rule = {\n        weight:          1,\n        podAffinityTerm: {\n          topologyKey:   HOSTNAME,\n          labelSelector: { matchLabels: { [HCI_ANNOTATIONS.VM_NAME_PREFIX]: namePrefix } }\n        }\n      };\n\n      return {\n        ...spec,\n        template: {\n          ...spec.template,\n          spec: {\n            ...spec.template.spec,\n            affinity: {\n              ...spec.template.spec.affinity,\n              podAntiAffinity: {\n                ...spec.template.spec?.affinity?.podAntiAffinity,\n                preferredDuringSchedulingIgnoredDuringExecution: [\n                  ...(spec.template.spec?.affinity?.podAntiAffinity?.preferredDuringSchedulingIgnoredDuringExecution || []),\n                  rule\n                ]\n              }\n            }\n          }\n        }\n      };\n    },\n\n    parseNetworkRows(networkRow) {\n      const networks = [];\n      const interfaces = [];\n\n      networkRow.forEach( (R) => {\n        const _network = this.parseNetwork(R);\n        const _interface = this.parseInterface(R);\n\n        networks.push(_network);\n        interfaces.push(_interface);\n      });\n\n      const spec = {\n        ...this.spec.template.spec,\n        domain: {\n          ...this.spec.template.spec.domain,\n          devices: {\n            ...this.spec.template.spec.domain.devices,\n            interfaces,\n          },\n        },\n        networks\n      };\n\n      this.spec.template['spec'] = spec;\n    },\n\n    parseAccessCredentials() {\n      const out = [];\n      const annotations = {};\n      const users = JSON.parse(this.spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] || '[]');\n\n      for (const row of this.accessCredentials) {\n        if (this.needNewSecret) {\n          row.secretName = this.generateSecretName(this.secretNamePrefix);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          users.push(row.username);\n          out.push({\n            userPassword: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { } }\n            }\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          users.push(...row.users);\n          annotations[row.secretName] = row.sshkeys;\n          out.push({\n            sshPublicKey: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { users: row.users } }\n            }\n          });\n        }\n      }\n\n      if (out.length === 0 && !!this.spec.template.spec.accessCredentials) {\n        delete this.spec.template.spec.accessCredentials;\n      } else {\n        this.spec.template.spec.accessCredentials = out;\n      }\n\n      if (users.length !== 0) {\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] = JSON.stringify(Array.from(new Set(users)));\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] = JSON.stringify(annotations);\n      }\n    },\n\n    getMaintenanceStrategyOptionLabel(opt) {\n      return this.t(`harvester.virtualMachine.maintenanceStrategy.options.${ opt.label || opt }`);\n    },\n\n    getInitUserData(config) {\n      const _QGA_JSON = this.getMatchQGA(config.osType);\n\n      const out = jsyaml.dump(_QGA_JSON);\n\n      return `#cloud-config\\n${ out }`;\n    },\n\n    /**\n     * Generate user data yaml which is decide by the \"Install guest agent\",\n     * \"OS type\", \"SSH Keys\" and user input.\n     * @param config\n     */\n    getUserData(config) {\n      try {\n        // https://github.com/eemeli/yaml/issues/136\n        let userDataDoc = this.userScript ? YAML.parseDocument(this.userScript) : YAML.parseDocument({});\n\n        const allSSHAuthorizedKeys = this.mergeSSHAuthorizedKeys(this.userScript);\n\n        if (allSSHAuthorizedKeys.length > 0) {\n          userDataDoc.setIn(['ssh_authorized_keys'], allSSHAuthorizedKeys);\n        } else if (YAML.isCollection(userDataDoc.getIn('ssh_authorized_keys'))) {\n          userDataDoc.deleteIn(['ssh_authorized_keys']);\n        }\n\n        userDataDoc = config.installAgent ? this.mergeQGA({ userDataDoc, ...config }) : this.deleteQGA({ userDataDoc, ...config });\n        const userDataYaml = userDataDoc.toString();\n\n        if (userDataYaml === '{}\\n') {\n          // When the YAML parsed value is '{}\\n', it means that the userData is empty, then undefined is returned.\n          return undefined;\n        }\n\n        return userDataYaml;\n      } catch (e) {\n        console.error('Error: Unable to parse yaml document', e); // eslint-disable-line no-console\n\n        return this.userScript;\n      }\n    },\n\n    updateSSHKey(neu) {\n      this['sshKey'] = neu;\n    },\n\n    updateCpuMemory(cpu, memory) {\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n    },\n\n    parseDisk(R, index) {\n      const out = { name: R.name };\n\n      if (R.type === HARD_DISK) {\n        out.disk = { bus: R.bus };\n      } else if (R.type === CD_ROM) {\n        out.cdrom = { bus: R.bus };\n      }\n\n      out.bootOrder = index + 1;\n\n      return out;\n    },\n\n    parseVolume(R, dataVolumeName) {\n      const out = { name: R.name };\n\n      if (R.source === SOURCE_TYPE.CONTAINER) {\n        out.containerDisk = { image: R.container };\n      } else if (R.source === SOURCE_TYPE.IMAGE || R.source === SOURCE_TYPE.NEW || R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n        out.persistentVolumeClaim = { claimName: dataVolumeName };\n        if (R.hotpluggable) {\n          out.persistentVolumeClaim.hotpluggable = true;\n        }\n      }\n\n      return out;\n    },\n\n    parseVolumeClaimTemplate(R, dataVolumeName) {\n      if (!String(R.size).includes('Gi') && R.size) {\n        R.size = `${ R.size }Gi`;\n      }\n\n      const out = {\n        metadata: { name: dataVolumeName },\n        spec:     {\n          accessModes: [R.accessMode],\n          resources:   { requests: { storage: R.size } },\n          volumeMode:  R.volumeMode\n        }\n      };\n\n      if (R.dataSource) {\n        out.spec.dataSource = R.dataSource;\n      }\n\n      switch (R.source) {\n      case SOURCE_TYPE.ATTACH_VOLUME:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.NEW:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.IMAGE: {\n        const image = this.images.find( (I) => R.image === I.id);\n\n        if (image) {\n          out.spec.storageClassName = image.storageClassName;\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: image.id };\n        } else {\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: '' };\n        }\n\n        break;\n      }\n      }\n\n      return out;\n    },\n\n    getSSHListValue(arr) {\n      return arr.map( (id) => this.getSSHValue(id)).filter( (O) => O !== undefined);\n    },\n\n    parseInterface(R) {\n      const _interface = {};\n      const type = R.type;\n\n      _interface[type] = {};\n\n      if (R.macAddress) {\n        _interface.macAddress = R.macAddress;\n      }\n\n      _interface.model = R.model;\n      _interface.name = R.name;\n\n      return _interface;\n    },\n\n    parseNetwork(R) {\n      const out = { name: R.name };\n\n      if (R.isPod) {\n        out.pod = {};\n      } else {\n        out.multus = { networkName: R.networkName };\n      }\n\n      return out;\n    },\n\n    updateUserData(value) {\n      this.userScript = value;\n    },\n\n    updateNetworkData(value) {\n      this.networkScript = value;\n    },\n\n    mergeSSHAuthorizedKeys(yaml) {\n      try {\n        const sshAuthorizedKeys = YAML.parseDocument(yaml)\n          .get('ssh_authorized_keys')\n          ?.toJSON() || [];\n\n        const sshList = this.getSSHListValue(this.sshKey);\n\n        return sshAuthorizedKeys.length ? [...new Set([...sshList, ...sshAuthorizedKeys])] : sshList;\n      } catch (e) {\n        return [];\n      }\n    },\n\n    /**\n     * @param paths A Object path, e.g. 'a.b.c' => ['a', 'b', 'c']. Refer to https://eemeli.org/yaml/#scalar-values\n     * @returns\n     */\n    deleteYamlDocProp(doc, paths) {\n      try {\n        const item = doc.getIn([])?.items[0];\n        const key = item?.key;\n        const hasCloudConfigComment = !!key?.commentBefore?.includes('cloud-config');\n        const isMatchProp = key.source === paths[paths.length - 1];\n\n        if (key && hasCloudConfigComment && isMatchProp) {\n          // Comments are mounted on the next node and we should not delete the node containing cloud-config\n        } else {\n          doc.deleteIn(paths);\n        }\n      } catch (e) {}\n    },\n\n    mergeQGA(config) {\n      const { osType, userDataDoc } = config;\n      const _QGA_JSON = this.getMatchQGA(osType);\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      let packages = userDataJSON?.packages || [];\n      let runcmd = userDataJSON?.runcmd || [];\n\n      userDataDoc.setIn(['package_update'], true);\n\n      if (Array.isArray(packages)) {\n        if (!packages.includes('qemu-guest-agent')) {\n          packages.push('qemu-guest-agent');\n        }\n      } else {\n        packages = QGA_JSON.packages;\n      }\n\n      if (Array.isArray(runcmd)) {\n        let findIndex = -1;\n        const hasSameRuncmd = runcmd.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n\n        const hasSimilarRuncmd = runcmd.find( (S, index) => {\n          if (Array.isArray(S) && S.join('-') === this.getSimilarRuncmd(osType).join('-')) {\n            findIndex = index;\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (hasSimilarRuncmd) {\n          runcmd[findIndex] = _QGA_JSON.runcmd[0];\n        } else if (!hasSameRuncmd) {\n          runcmd.push(_QGA_JSON.runcmd[0]);\n        }\n      } else {\n        runcmd = _QGA_JSON.runcmd;\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []); // It needs to be set empty first, as it is possible that cloud-init comments are mounted on this node\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    deleteQGA(config) {\n      const { osType, userDataDoc, deletePackage = false } = config;\n\n      const userDataTemplateValue = this.$store.getters['harvester/byId'](CONFIG_MAP, this.userDataTemplateId)?.data?.cloudInit || '';\n\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      const packages = userDataJSON?.packages || [];\n      const runcmd = userDataJSON?.runcmd || [];\n\n      if (Array.isArray(packages) && deletePackage) {\n        const templateHasQGAPackage = this.convertToJson(userDataTemplateValue);\n\n        for (let i = 0; i < packages.length; i++) {\n          if (packages[i] === 'qemu-guest-agent') {\n            if (!(Array.isArray(templateHasQGAPackage?.packages) && templateHasQGAPackage.packages.includes('qemu-guest-agent'))) {\n              packages.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      if (Array.isArray(runcmd)) {\n        const _QGA_JSON = this.getMatchQGA(osType);\n\n        for (let i = 0; i < runcmd.length; i++) {\n          if (Array.isArray(runcmd[i]) && runcmd[i].join('-') === _QGA_JSON.runcmd[0].join('-')) {\n            runcmd.splice(i, 1);\n          }\n        }\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []);\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    generateSecretName(name) {\n      return name ? `${ name }-${ randomStr(5).toLowerCase() }` : undefined;\n    },\n\n    getOwnerReferencesFromVM(resource) {\n      const name = resource.metadata.name;\n      const kind = resource.kind;\n      const apiVersion = this.resourceType === HCI.VM ? 'kubevirt.io/v1' : 'harvesterhci.io/v1beta1';\n      const uid = resource?.metadata?.uid;\n\n      return [{\n        name,\n        kind,\n        uid,\n        apiVersion,\n      }];\n    },\n\n    async saveSecret(vm) {\n      if (!vm?.spec || !this.secretName || this.isWindows) {\n        return true;\n      }\n\n      let secret = this.getSecret(vm.spec);\n\n      // const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      if (!secret && this.isEdit && this.secretRef) {\n        // When editing the vm, if the userData and networkData are deleted, we also need to clean up the secret values\n        secret = this.secretRef;\n      }\n\n      if (!secret || this.needNewSecret) {\n        secret = await this.$store.dispatch('harvester/create', {\n          metadata: {\n            name:            this.secretName,\n            namespace:       this.value.metadata.namespace,\n            labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n            ownerReferences: this.getOwnerReferencesFromVM(vm)\n          },\n          type: SECRET\n        });\n      }\n\n      try {\n        if (secret) {\n          // If none of the data comes from the secret, then no data needs to be saved to the secret\n          if (!this.saveUserDataAsClearText || !this.saveNetworkDataAsClearText) {\n            secret.setData('userdata', this.userData || '');\n            secret.setData('networkdata', this.networkScript || '');\n            await secret.save();\n          }\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    async saveAccessCredentials(vm) {\n      if (!vm?.spec) {\n        return true;\n      }\n\n      // save\n      const toSave = [];\n\n      for (const row of this.accessCredentials) {\n        let secretRef = row.secretRef;\n\n        if (!secretRef || this.needNewSecret) {\n          secretRef = await this.$store.dispatch('harvester/create', {\n            metadata: {\n              name:            row.secretName,\n              namespace:       vm.metadata.namespace,\n              labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n              ownerReferences: this.getOwnerReferencesFromVM(vm)\n            },\n            type: SECRET\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          secretRef.setData(row.username, row.newPassword);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          for (const secretId of row.sshkeys) {\n            const keypair = (this.$store.getters['harvester/all'](HCI.SSH) || []).find((s) => s.id === secretId);\n\n            secretRef.setData(`${ keypair.metadata.namespace }-${ keypair.metadata.name }`, keypair.spec.publicKey);\n          }\n        }\n\n        toSave.push(secretRef);\n      }\n\n      try {\n        for (const resource of toSave) {\n          await resource.save();\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    getAccessCredentialsValidation() {\n      const errors = [];\n\n      for (let i = 0; i < this.accessCredentials.length; i++) {\n        const row = this.accessCredentials[i];\n        const source = row.source;\n\n        if (source === ACCESS_CREDENTIALS.RESET_PWD) {\n          if (!row.username) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.newPassword) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (row.newPassword && row.newPassword.length < 6) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.number.min', { key: fieldName, val: '6' });\n\n            errors.push(message);\n          }\n        } else {\n          if (!row.users || row.users.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.sshkeys || row.sshkeys.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.sshKeyValue');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n        }\n\n        if (errors.length > 0) {\n          break;\n        }\n      }\n\n      return errors;\n    },\n\n    getHasCreatedVolumes(spec) {\n      const out = [];\n\n      if (spec.template.spec.volumes) {\n        spec.template.spec.volumes.forEach((V) => {\n          if (V?.persistentVolumeClaim?.claimName) {\n            out.push(V.persistentVolumeClaim.claimName);\n          }\n        });\n      }\n\n      return out;\n    },\n\n    handlerUSBTablet(val) {\n      const hasExist = this.isInstallUSBTablet(this.spec);\n      const inputs = this.spec.template.spec.domain.devices?.inputs || [];\n\n      if (val && !hasExist) {\n        if (inputs.length > 0) {\n          inputs.push(USB_TABLET[0]);\n        } else {\n          Object.assign(this.spec.template.spec.domain.devices, {\n            inputs: [\n              USB_TABLET[0]\n            ]\n          });\n        }\n      } else if (!val) {\n        const index = inputs.findIndex((O) => isEqual(O, USB_TABLET[0]));\n\n        if (hasExist && inputs.length === 1) {\n          delete this.spec.template.spec.domain.devices['inputs'];\n        } else if (hasExist) {\n          inputs.splice(index, 1);\n          this.spec.template.spec.domain.devices['inputs'] = inputs;\n        }\n      }\n    },\n\n    setBootMethod(boot = { efi: false, secureBoot: false }) {\n      if (boot.efi && boot.secureBoot) {\n        set(this.spec.template.spec.domain, 'features.smm.enabled', true);\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', true);\n      } else if (boot.efi && !boot.secureBoot) {\n        // set(this.spec.template.spec.domain, 'features.smm.enabled', false);\n\n        try {\n          delete this.spec.template.spec.domain.features.smm['enabled'];\n          const noKeys = Object.keys(this.spec.template.spec.domain.features.smm).length === 0;\n\n          if (noKeys) {\n            delete this.spec.template.spec.domain.features['smm'];\n          }\n        } catch (e) {}\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', false);\n      } else {\n        delete this.spec.template.spec.domain['firmware'];\n        delete this.spec.template.spec.domain.features['smm'];\n      }\n    },\n\n    setCpuPinning(value) {\n      if (value) {\n        set(this.spec.template.spec.domain.cpu, 'dedicatedCpuPlacement', true);\n      } else {\n        delete this.spec.template.spec.domain.cpu['dedicatedCpuPlacement'];\n      }\n    },\n\n    setTPM(tpmEnabled) {\n      if (tpmEnabled) {\n        set(this.spec.template.spec.domain.devices, 'tpm', {});\n      } else {\n        delete this.spec.template.spec.domain.devices['tpm'];\n      }\n    },\n\n    deleteSSHFromUserData(ssh = []) {\n      const sshAuthorizedKeys = this.getSSHFromUserData(this.userScript);\n\n      ssh.map((id) => {\n        const index = sshAuthorizedKeys.findIndex((value) => value === this.getSSHValue(id));\n\n        if (index >= 0) {\n          sshAuthorizedKeys.splice(index, 1);\n        }\n      });\n\n      const userDataJson = this.convertToJson(this.userScript);\n\n      userDataJson.ssh_authorized_keys = sshAuthorizedKeys;\n\n      if (sshAuthorizedKeys.length === 0) {\n        delete userDataJson.ssh_authorized_keys;\n      }\n\n      if (isEmpty(userDataJson)) {\n        this['userScript'] = undefined;\n      } else {\n        this['userScript'] = jsyaml.dump(userDataJson);\n      }\n\n      this.refreshYamlEditor();\n    },\n\n    refreshYamlEditor() {\n      this.$nextTick(() => {\n        this.$refs.yamlEditor?.updateValue();\n      });\n    },\n\n    toggleAdvanced() {\n      this.showAdvanced = !this.showAdvanced;\n    },\n\n    updateAgent(value) {\n      if (!value) {\n        this.deletePackage = true;\n      }\n    },\n\n    updateDataTemplateId(type, id) {\n      if (type === 'user') {\n        const oldInstallAgent = this.installAgent;\n\n        this.userDataTemplateId = id;\n        this.$nextTick(() => {\n          if (oldInstallAgent) {\n            this.installAgent = oldInstallAgent;\n          }\n        });\n      }\n    },\n\n    updateReserved(value = {}) {\n      const { memory } = value;\n\n      this['reservedMemory'] = memory;\n    },\n\n    updateTerminationGracePeriodSeconds(value) {\n      this['terminationGracePeriodSeconds'] = value;\n    },\n  },\n\n  watch: {\n    diskRows: {\n      handler(neu, old) {\n        if (Array.isArray(neu)) {\n          const imageId = neu[0]?.image;\n          const image = this.images.find( (I) => imageId === I.id);\n          const osType = image?.imageOSType;\n\n          const oldImageId = old[0]?.image;\n\n          if (this.isCreate && oldImageId === imageId && imageId) {\n            this.osType = osType;\n          }\n        }\n      }\n    },\n\n    secretRef: {\n      handler(secret) {\n        if (secret && this.resourceType !== HCI.BACKUP) {\n          this.secretName = secret?.metadata.name;\n        }\n      },\n      immediate: true,\n      deep:      true\n    },\n\n    isWindows(val) {\n      if (val) {\n        this['sshKey'] = [];\n        this['userScript'] = undefined;\n        this['installAgent'] = false;\n      }\n    },\n\n    installUSBTablet(val) {\n      this.handlerUSBTablet(val);\n    },\n\n    efiEnabled(val) {\n      this.setBootMethod({ efi: val, secureBoot: this.secureBoot });\n    },\n\n    secureBoot(val) {\n      this.setBootMethod({ efi: this.efiEnabled, secureBoot: val });\n    },\n\n    cpuPinning(value) {\n      this.setCpuPinning(value);\n    },\n\n    tpmEnabled(val) {\n      this.setTPM(val);\n    },\n\n    installAgent: {\n      /**\n       * rules\n       * 1. The value in user Data is the first priority\n       * 2. After selecting the template, if checkbox is checked, only merge operation will be performed on user data,\n       *    if checkbox is unchecked, no value will be deleted in user data\n       */\n      handler(neu) {\n        if (this.deleteAgent) {\n          let out = this.getUserData({\n            installAgent: neu, osType: this.osType, deletePackage: this.deletePackage\n          });\n\n          if (neu) {\n            const hasCloudComment = this.hasCloudConfigComment(out);\n\n            if (!hasCloudComment) {\n              out = `#cloud-config\\n${ out }`;\n            }\n          }\n\n          this['userScript'] = out;\n          this.refreshYamlEditor();\n        }\n        this.deleteAgent = true;\n        this.deletePackage = false;\n      }\n    },\n\n    osType(neu) {\n      const out = this.getUserData({ installAgent: this.installAgent, osType: neu });\n\n      this['userScript'] = out;\n      this.refreshYamlEditor();\n    },\n\n    userScript(neu, old) {\n      const hasInstallAgent = this.hasInstallAgent(neu, this.osType, this.installAgent);\n\n      if (hasInstallAgent !== this.installAgent) {\n        this.deleteAgent = false;\n        this.installAgent = hasInstallAgent;\n      }\n    },\n\n    sshKey(neu, old) {\n      const _diff = difference(old, neu);\n\n      if (_diff.length && this.isEdit) {\n        this.deleteSSHFromUserData(_diff);\n      }\n    }\n  }\n};\n"],"names":["QGA_JSON","package_update","packages","runcmd","QGA_MAP","default","USB_TABLET","bus","name","type","SSH_EXISTING_TYPE","EXISTING_ALL","EXISTING_ONLY_ANNOTATION","EXISTING_ONLY_CLOUD","methods","hasCloudConfigComment","userScript","userDataDoc","YAML","items","contents","exist","comment","includes","commentBefore","map","item","key","getSSHValue","id","inStore","this","$store","getters","sshs","HCI","SSH","find","O","spec","publicKey","undefined","getOsType","vm","metadata","labels","HCI_ANNOTATIONS","OS","getMatchQGA","osType","_QGA_JSON","clone","hasCustomQGA","forEach","match","getSimilarRuncmd","hasInstallAgent","oldValue","dataFormat","jsyaml","e","Error","S","Array","isArray","join","isInstallUSBTablet","inputs","template","domain","devices","isEqual","isEfiEnabled","firmware","bootloader","efi","isTpmEnabled","tpm","isSecureBoot","secureBoot","isCpuPinning","cpu","dedicatedCpuPlacement","getCloudInitNoCloud","secret","getSecret","userData","decodedData","userdata","networkData","networkdata","cloudInitNoCloud","volumes","V","saveUserDataAsClearText","saveNetworkDataAsClearText","secrets","SECRET","secretName","secretRef","networkDataSecretRef","s","getAccessCredentials","credentials","accessCredentials","annotations","JSON","parse","DYNAMIC_SSHKEYS_NAMES","c","source","userPassword","out","username","newPassword","users","sshkeys","Object","keys","data","propagationMethod","qemuGuestAgent","getRootImageId","parseVolumeClaimTemplates","IMAGE_ID","getSSHFromAnnotation","ids","SSH_NAMES","convertToJson","script","getSSHFromUserData","ssh_authorized_keys","compareSSHValue","a","b","r","replace","mergeAllSSHs","length","allSSHs","hasSSHResource","ssh","_userDataSSH","sshValue","push","LONGHORN_V2_DATA_ENGINE","MANAGEMENT_NETWORK","label","value","CD_ROM","HARD_DISK","mixins","impl","props","required","resourceType","String","fetch","hash","pvs","dispatch","PV","pvcs","PVC","storageClasses","STORAGE_CLASS","settings","SETTING","images","IMAGE","versions","VM_VERSION","templates","VM_TEMPLATE","networkAttachment","NETWORK_ATTACHMENT","vmis","VMI","vmims","VMIM","vms","VM","addons","ADD_ONS","longhornV2Engine","LONGHORN","SETTINGS","NODE","nodes","CLUSTER_NETWORK","clusterNetworks","VLAN_CONFIG","VOLUMES","longhornVolumes","res","allHash","hasPCISchema","PCI_DEVICE","hasSRIOVGPUSchema","SR_IOVGPU_DEVICE","enabledAddons","reduce","acc","addon","enabled","enabledPCI","PCI_DEVICE_CONTROLLER","enabledSriovgpu","NVIDIA_DRIVER_TOOLKIT_CONTROLLER","isClone","realMode","_CLONE","sshKey","maintenanceStrategies","maintenanceStrategy","runStrategies","runStrategy","installAgent","hasCreateVolumes","installUSBTablet","networkScript","imageId","diskRows","networkRows","machineType","showAdvanced","deleteAgent","memory","reservedMemory","efiEnabled","tpmEnabled","userDataTemplateId","immutableMode","_CREATE","_VIEW","terminationGracePeriodSeconds","cpuPinning","computed","filteredNamespaces","NAMESPACE","filter","namespace","isSystem","nodesIdOptions","networkNames","n","networkName","vmNetworks","selectedVMNetworks","uniq","clusterNetworkResource","N","isUnSchedulable","isEtcd","node","requireLabelKeys","isNetworkSchedule","clusterNetwork","requireLabelKey","nameDisplay","t","disabled","defaultStorageClass","defaultStorage","isDefault","storageClassSetting","storageClassValue","HCI_SETTING","DEFAULT_STORAGE_CLASS","customVolumeMode","volumeMode","customAccessMode","accessModes","isWindows","needNewSecret","isCreate","defaultTerminationSetting","setting","VM_TERMINATION_PERIOD","Number","affinityLabels","namespaceInputLabel","namespaceSelectionLabels","addLabel","topologyKeyPlaceholder","created","getInitConfig","init","config","existUserData","fromTemplate","BACKUP","status","volumeBackups","resources","limits","requests","VM_MAINTENANCE_MODE_STRATEGY","cores","VM_RESERVED_MEMORY","getDiskRows","getNetworkRows","getHasCreatedVolumes","secretBackups","secretNetworkData","secretUserData","base64Decode","getInitUserData","prototype","hasOwnProperty","call","running","refreshYamlEditor","volBackups","_volumes","_disks","disks","_volumeClaimTemplates","size","imageResource","I","isIsoImage","test","imageSuffix","imageSize","Math","max","virtualSize","isEncrypted","vBackup","volumeName","imageSizeGiB","ceil","randomStr","SOURCE_TYPE","accessMode","storageClassName","image","DISK","index","volume","realName","container","hotpluggable","dataSource","cdrom","disk","containerDisk","CONTAINER","persistentVolumeClaim","claimName","DVT","T","NEW","dataVolumeSpecPVC","storage","allPVCs","pvcResource","ATTACH_VOLUME","bootOrder","parseValue","parseSi","formatSize","formatSi","increment","addSuffix","maxExponent","minExponent","pvc","P","volumeStatus","relatedPV","VOLUME_ERROR","sortBy","networks","interfaces","network","sriov","bridge","isPod","pod","newCreateId","model","multus","parseVM","getUserData","parseOther","parseAccessCredentials","parseNetworkRows","parseDiskRows","machine","toString","diskNameLables","volumeClaimTemplates","R","prefixName","dataVolumeName","toLowerCase","_disk","parseDisk","_volume","parseVolume","_dataVolumeTemplate","parseVolumeClaimTemplate","generateSecretName","secretNamePrefix","D","cloudinitdisk","stringify","VM_NAME","isSingle","multiVMScheduler","VOLUME_CLAIM_TEMPLATE","NETWORK_IPS","networkIps","CREATOR","removeTrailingHyphen","str","endsWith","slice","namePrefix","VM_NAME_PREFIX","rule","weight","podAffinityTerm","topologyKey","HOSTNAME","labelSelector","matchLabels","affinity","podAntiAffinity","preferredDuringSchedulingIgnoredDuringExecution","networkRow","_network","parseNetwork","_interface","parseInterface","DYNAMIC_SSHKEYS_USERS","row","ACCESS_CREDENTIALS","RESET_PWD","INJECT_SSH","sshPublicKey","from","Set","getMaintenanceStrategyOptionLabel","opt","allSSHAuthorizedKeys","mergeSSHAuthorizedKeys","setIn","getIn","deleteIn","mergeQGA","deleteQGA","userDataYaml","console","error","updateSSHKey","neu","updateCpuMemory","getSSHListValue","arr","macAddress","updateUserData","updateNetworkData","yaml","sshAuthorizedKeys","get","toJSON","sshList","deleteYamlDocProp","doc","paths","isMatchProp","userDataYAML","userDataJSON","findIndex","hasSameRuncmd","hasSimilarRuncmd","deletePackage","userDataTemplateValue","CONFIG_MAP","cloudInit","templateHasQGAPackage","i","splice","getOwnerReferencesFromVM","resource","kind","apiVersion","uid","saveSecret","isEdit","CLOUD_INIT","ownerReferences","setData","save","Promise","reject","saveAccessCredentials","toSave","secretId","keypair","getAccessCredentialsValidation","errors","fieldName","message","val","handlerUSBTablet","hasExist","assign","setBootMethod","boot","set","features","smm","noKeys","setCpuPinning","setTPM","deleteSSHFromUserData","userDataJson","isEmpty","$nextTick","$refs","yamlEditor","updateValue","toggleAdvanced","updateAgent","updateDataTemplateId","oldInstallAgent","updateReserved","updateTerminationGracePeriodSeconds","watch","handler","old","imageOSType","oldImageId","immediate","deep","hasCloudComment","_diff","difference"],"sourceRoot":""}